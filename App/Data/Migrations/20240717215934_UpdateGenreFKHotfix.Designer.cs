// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using code_assessment_api.Data;

#nullable disable

namespace code_assessment_api.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240717215934_UpdateGenreFKHotfix")]
    partial class UpdateGenreFKHotfix
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("code_assessment_api.Models.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.Property<string>("ISBN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsBestSeller")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFeatured")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNewArrival")
                        .HasColumnType("bit");

                    b.Property<int>("Pages")
                        .HasColumnType("int");

                    b.Property<string>("Publisher")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GenreId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Author = "Granville Collins",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Molestias ea dolorem distinctio ut suscipit qui quaerat facere molestias. Voluptate velit tempore. Est ea quaerat dolor non repellat vitae aliquid at.",
                            GenreId = 2,
                            ISBN = "aeae159f-63ca-1b23-58a7-75002359f05d",
                            Image = "https://picsum.photos/640/480/?image=173",
                            IsBestSeller = false,
                            IsDeleted = false,
                            IsFeatured = false,
                            IsNewArrival = false,
                            Pages = 456,
                            Publisher = "Bradtke - Borer",
                            Title = "Veritatis voluptatem culpa libero iste aperiam saepe.",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Year = 2023
                        },
                        new
                        {
                            Id = 2,
                            Author = "Treva Crona",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Rerum soluta expedita quo omnis. Magnam quas officia quia. Ut quibusdam dolor dolore quas dignissimos amet quia. Quo sint alias accusantium laboriosam ea nisi magnam quos. Dignissimos sit ut facilis.",
                            GenreId = 5,
                            ISBN = "97256a54-0523-0735-7bb1-b1093e630e4b",
                            Image = "https://picsum.photos/640/480/?image=625",
                            IsBestSeller = false,
                            IsDeleted = false,
                            IsFeatured = false,
                            IsNewArrival = false,
                            Pages = 233,
                            Publisher = "Larson Inc",
                            Title = "Reprehenderit veritatis eveniet voluptatum asperiores.",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Year = 2023
                        },
                        new
                        {
                            Id = 3,
                            Author = "Erwin Rodriguez",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Asperiores iste sapiente officiis consequatur provident animi veniam ab consequatur. Et voluptate quia consequatur. Eaque sint et fugiat quia.",
                            GenreId = 2,
                            ISBN = "90633bd5-9c2a-94fd-1078-babb6400e831",
                            Image = "https://picsum.photos/640/480/?image=144",
                            IsBestSeller = false,
                            IsDeleted = false,
                            IsFeatured = false,
                            IsNewArrival = false,
                            Pages = 339,
                            Publisher = "Thompson - Ruecker",
                            Title = "Distinctio vel sit alias dolorum sed distinctio quibusdam doloribus.",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Year = 2024
                        },
                        new
                        {
                            Id = 4,
                            Author = "Vesta Pollich",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Laudantium ea quod sit aspernatur quae inventore nostrum natus. Nostrum magni reprehenderit eos sed labore saepe delectus. Culpa est minus est temporibus.",
                            GenreId = 2,
                            ISBN = "c668c545-adc0-6e8c-42fe-d1567f4c2d87",
                            Image = "https://picsum.photos/640/480/?image=838",
                            IsBestSeller = false,
                            IsDeleted = false,
                            IsFeatured = false,
                            IsNewArrival = false,
                            Pages = 465,
                            Publisher = "Goodwin - Kemmer",
                            Title = "Asperiores at omnis molestiae dolor iure repellat in.",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Year = 2024
                        },
                        new
                        {
                            Id = 5,
                            Author = "Ludwig Abbott",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Quidem ea nemo fugit quasi qui. Sint iure veniam placeat. Consectetur et quo eligendi aperiam cupiditate tempora voluptatem necessitatibus. Consequatur laborum molestias deleniti. Deserunt est nobis qui. Possimus repellendus explicabo impedit ut sint ea.",
                            GenreId = 1,
                            ISBN = "dce7144e-486e-f459-92a7-a43a1be8bd40",
                            Image = "https://picsum.photos/640/480/?image=20",
                            IsBestSeller = false,
                            IsDeleted = false,
                            IsFeatured = false,
                            IsNewArrival = false,
                            Pages = 415,
                            Publisher = "Emmerich - Daugherty",
                            Title = "Minus sapiente ad nihil sed harum aut ut.",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Year = 2024
                        },
                        new
                        {
                            Id = 6,
                            Author = "Helga Okuneva",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Ea iste veritatis quod. Sit nobis quas maiores deserunt. Voluptas optio omnis optio eos possimus quisquam. Commodi nulla voluptate at illo quidem corporis suscipit beatae occaecati. Necessitatibus reprehenderit voluptas enim excepturi nam voluptas nulla sunt.",
                            GenreId = 4,
                            ISBN = "581b3f39-95e6-f3ac-5d85-dcc636798f13",
                            Image = "https://picsum.photos/640/480/?image=83",
                            IsBestSeller = false,
                            IsDeleted = false,
                            IsFeatured = false,
                            IsNewArrival = false,
                            Pages = 282,
                            Publisher = "Spencer - Feil",
                            Title = "Repellat dolores dolorem rerum dolor ex.",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Year = 2023
                        },
                        new
                        {
                            Id = 7,
                            Author = "Kali Kovacek",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Dolores laborum impedit eos qui officiis. Aut esse voluptatum laudantium a rerum aliquid quia illum quis. Laboriosam aliquam dignissimos sunt sed ipsum.",
                            GenreId = 3,
                            ISBN = "654043ee-884d-9f9d-b92a-ac296ba3d959",
                            Image = "https://picsum.photos/640/480/?image=194",
                            IsBestSeller = false,
                            IsDeleted = false,
                            IsFeatured = false,
                            IsNewArrival = false,
                            Pages = 191,
                            Publisher = "Cummerata - Quigley",
                            Title = "Amet ducimus omnis sequi.",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Year = 2023
                        },
                        new
                        {
                            Id = 8,
                            Author = "Autumn Aufderhar",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Necessitatibus facilis aut aut. Ut est facilis. Dolores voluptas et officiis accusantium dicta nobis voluptatum. Qui non voluptas. Ut voluptatum commodi illo autem. Est tempore ea officia vel veritatis voluptas debitis numquam.",
                            GenreId = 2,
                            ISBN = "5247a001-0535-658b-c9f8-be99129fad29",
                            Image = "https://picsum.photos/640/480/?image=837",
                            IsBestSeller = false,
                            IsDeleted = false,
                            IsFeatured = false,
                            IsNewArrival = false,
                            Pages = 226,
                            Publisher = "McLaughlin - Mitchell",
                            Title = "Aliquam maxime et fugiat incidunt aut perspiciatis.",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Year = 2024
                        },
                        new
                        {
                            Id = 9,
                            Author = "Estevan Walker",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Et consectetur libero. Odit laudantium eligendi necessitatibus quaerat perferendis. Possimus distinctio sed soluta molestias odio. Est ut exercitationem a delectus rem similique voluptatum.",
                            GenreId = 4,
                            ISBN = "666a5d69-b126-85a6-00fc-4b42db8c3b95",
                            Image = "https://picsum.photos/640/480/?image=178",
                            IsBestSeller = false,
                            IsDeleted = false,
                            IsFeatured = false,
                            IsNewArrival = false,
                            Pages = 420,
                            Publisher = "Zulauf - Nienow",
                            Title = "Maxime quod ut optio omnis ipsam.",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Year = 2024
                        },
                        new
                        {
                            Id = 10,
                            Author = "Rylee Klocko",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Sed rerum eos nulla voluptas dolore distinctio. Aut excepturi sed modi autem iusto sint consequuntur dignissimos sed. Inventore beatae est accusamus consectetur et nihil quidem sunt. Iure voluptas consequatur aut et nesciunt dolores alias. Magni cum odit neque et. Vel deleniti quaerat nobis est sed perspiciatis ducimus.",
                            GenreId = 1,
                            ISBN = "ce2ed45c-4f81-cae7-0fc6-1b95fd0a7477",
                            Image = "https://picsum.photos/640/480/?image=897",
                            IsBestSeller = false,
                            IsDeleted = false,
                            IsFeatured = false,
                            IsNewArrival = false,
                            Pages = 200,
                            Publisher = "Satterfield and Sons",
                            Title = "Occaecati animi dolor.",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Year = 2024
                        });
                });

            modelBuilder.Entity("code_assessment_api.Models.Genre", b =>
                {
                    b.Property<int>("GenreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GenreId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GenreId");

                    b.ToTable("Genre");

                    b.HasData(
                        new
                        {
                            GenreId = 1,
                            Description = "",
                            Name = "Fiction"
                        },
                        new
                        {
                            GenreId = 2,
                            Description = "",
                            Name = "Non-Fiction"
                        },
                        new
                        {
                            GenreId = 3,
                            Description = "",
                            Name = "Self-Help"
                        },
                        new
                        {
                            GenreId = 4,
                            Description = "",
                            Name = "Biography"
                        },
                        new
                        {
                            GenreId = 5,
                            Description = "",
                            Name = "Cookbook"
                        });
                });

            modelBuilder.Entity("code_assessment_api.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("First")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Last")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfilePicture")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("code_assessment_api.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("code_assessment_api.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("code_assessment_api.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("code_assessment_api.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("code_assessment_api.Models.Book", b =>
                {
                    b.HasOne("code_assessment_api.Models.Genre", "Genre")
                        .WithMany("Books")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("code_assessment_api.Models.Genre", b =>
                {
                    b.Navigation("Books");
                });
#pragma warning restore 612, 618
        }
    }
}
