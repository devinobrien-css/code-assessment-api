// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using code_assessment_api.Data;

#nullable disable

namespace code_assessment_api.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240719004225_UpdateCheckOutDates")]
    partial class UpdateCheckOutDates
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("code_assessment_api.Models.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.Property<string>("ISBN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsBestSeller")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFeatured")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNewArrival")
                        .HasColumnType("bit");

                    b.Property<int>("Pages")
                        .HasColumnType("int");

                    b.Property<string>("Publisher")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GenreId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Author = "Sherwood Thiel",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Tempore magnam et quia earum. Cumque consequuntur asperiores saepe eum debitis. Debitis similique vitae numquam. Totam delectus consequatur molestiae incidunt magnam qui quia suscipit rerum. Culpa ipsa ullam voluptatem sed reprehenderit sed. Similique sunt repellat officiis accusantium possimus commodi et.",
                            GenreId = 2,
                            ISBN = "ec9af4a9-0a74-0f9b-9e79-4665c4a69ff7",
                            Image = "https://drive.google.com/thumbnail?id=1zycl7EiCECK541ialA9UCrs9HdfddUQb&sz=w1000",
                            IsBestSeller = false,
                            IsDeleted = false,
                            IsFeatured = false,
                            IsNewArrival = false,
                            Pages = 490,
                            Publisher = "Ullrich - Sauer",
                            Title = "Architecto magnam est.",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Year = 2024
                        },
                        new
                        {
                            Id = 2,
                            Author = "Lonzo Mohr",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Ut voluptate eum et iste fuga ut dolor corporis aut. Dolores itaque facilis neque. Ex praesentium eveniet quisquam libero. Aut quia magnam et expedita eligendi ratione voluptatem. Magnam alias accusantium reiciendis et sit dolor hic.",
                            GenreId = 4,
                            ISBN = "0528be46-f488-3f68-baf8-4a9b79c9b81b",
                            Image = "https://drive.google.com/thumbnail?id=1C4sRKzQrFUDNQ1X12WVeKbX0knOoC6tA&sz=w1000",
                            IsBestSeller = false,
                            IsDeleted = false,
                            IsFeatured = false,
                            IsNewArrival = false,
                            Pages = 259,
                            Publisher = "Wilkinson, Boehm and Blick",
                            Title = "Nobis dolores minima.",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Year = 2023
                        },
                        new
                        {
                            Id = 3,
                            Author = "Sydney Larson",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Et consequatur cupiditate similique qui laudantium rerum. Aut odio repellat sed officia explicabo est repellat. Eos quaerat rem velit. Nulla voluptatem modi. Quisquam assumenda ut consequatur eum nihil soluta beatae voluptatum non. Animi atque ea sed.",
                            GenreId = 3,
                            ISBN = "e6f5b595-3039-0cab-1f4e-6491d2c2ef64",
                            Image = "https://drive.google.com/thumbnail?id=12xFmb08WRoRr5omVtZ38Obo1imbutVlh&sz=w1000",
                            IsBestSeller = false,
                            IsDeleted = false,
                            IsFeatured = false,
                            IsNewArrival = false,
                            Pages = 159,
                            Publisher = "Effertz, Abbott and Volkman",
                            Title = "Enim dicta quod.",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Year = 2023
                        },
                        new
                        {
                            Id = 4,
                            Author = "Harrison Mohr",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Consequuntur ullam perspiciatis facere unde dolor. Consectetur in qui ut eligendi. Et consequatur iste.",
                            GenreId = 3,
                            ISBN = "80f8a864-f3c4-d54a-bcff-fd0d4f54feef",
                            Image = "https://drive.google.com/thumbnail?id=1bOcpnwGFqsWJVLKxwXC4pdQgo5M1wzDi&sz=w1000",
                            IsBestSeller = false,
                            IsDeleted = false,
                            IsFeatured = false,
                            IsNewArrival = false,
                            Pages = 161,
                            Publisher = "Borer, Hackett and Kautzer",
                            Title = "Dolorum reprehenderit earum.",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Year = 2024
                        },
                        new
                        {
                            Id = 5,
                            Author = "Chloe Lebsack",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Libero et quia ducimus esse exercitationem ut ex neque odit. Et eos impedit earum magnam. Voluptatum eum maxime velit eaque deleniti. Assumenda officiis debitis ut eum. Ab delectus et et dolorum.",
                            GenreId = 3,
                            ISBN = "0769647e-46fe-7c04-7d06-e1604b76b544",
                            Image = "https://drive.google.com/thumbnail?id=1Eu7yiiaAMfb0ktMOKhJZN6htKhF-TPDc&sz=w1000",
                            IsBestSeller = false,
                            IsDeleted = false,
                            IsFeatured = false,
                            IsNewArrival = false,
                            Pages = 236,
                            Publisher = "Rath and Sons",
                            Title = "Sit pariatur non.",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Year = 2024
                        },
                        new
                        {
                            Id = 6,
                            Author = "Sydni Barrows",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Ipsam est doloribus accusamus rerum nostrum reiciendis aut eos. A voluptates quasi labore quae et et et placeat error. Ea itaque asperiores nemo nemo delectus reiciendis eaque dolores.",
                            GenreId = 3,
                            ISBN = "548275dd-84d4-0670-a932-13eb67e1cfc6",
                            Image = "https://drive.google.com/thumbnail?id=1Hk2fvOg7hpmRwKWc-QTl82NGerqKib71&sz=w1000",
                            IsBestSeller = false,
                            IsDeleted = false,
                            IsFeatured = false,
                            IsNewArrival = false,
                            Pages = 107,
                            Publisher = "Hintz, Lebsack and Witting",
                            Title = "Vitae dolorem suscipit.",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Year = 2024
                        },
                        new
                        {
                            Id = 7,
                            Author = "Charlotte Pfeffer",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Quas quas corrupti ut atque blanditiis earum aut. Veniam necessitatibus modi aut quaerat dolore dignissimos et. Delectus id rerum doloribus ullam aperiam. Qui aut consequatur sed saepe autem.",
                            GenreId = 3,
                            ISBN = "db0f1967-5e2d-007a-0295-f8e387bea4fc",
                            Image = "https://drive.google.com/thumbnail?id=1cozBSsETbbn8YWA27-cyfpxAgOKX-FwJ&sz=w1000",
                            IsBestSeller = false,
                            IsDeleted = false,
                            IsFeatured = false,
                            IsNewArrival = false,
                            Pages = 474,
                            Publisher = "Fritsch, McLaughlin and Kris",
                            Title = "Vitae temporibus sit.",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Year = 2024
                        },
                        new
                        {
                            Id = 8,
                            Author = "Bettye Bashirian",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Dolor voluptatem aperiam sed voluptatibus aut reiciendis. Ipsa voluptatum id deserunt pariatur eius id sit consequatur eveniet. Quidem excepturi enim magnam. Eligendi eligendi facilis odio exercitationem assumenda. Explicabo rem eligendi sequi consequuntur necessitatibus.",
                            GenreId = 4,
                            ISBN = "782ee541-0841-6173-6649-67eda25023e1",
                            Image = "https://drive.google.com/thumbnail?id=1X_DcLIDCuXHtlh2LDJrS07h8lNcK1vXl&sz=w1000",
                            IsBestSeller = false,
                            IsDeleted = false,
                            IsFeatured = false,
                            IsNewArrival = false,
                            Pages = 399,
                            Publisher = "Rippin, Wyman and Sanford",
                            Title = "Sit officiis sunt.",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Year = 2024
                        },
                        new
                        {
                            Id = 9,
                            Author = "Mikel Brakus",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Beatae ipsa assumenda consequatur nulla officiis vel eveniet ut. Necessitatibus quo eveniet nulla modi omnis a voluptates. Soluta et fugiat. Molestiae possimus laborum ipsa consequuntur quo et blanditiis praesentium. Facilis porro eum sequi dignissimos quae voluptate dolorem a. Quia quaerat rerum.",
                            GenreId = 3,
                            ISBN = "3a34c283-995f-3a9c-1229-faf788ccad00",
                            Image = "https://drive.google.com/thumbnail?id=1UMX2PhE5C46EQuRL8UkbdUqIKGuBNbJ5&sz=w1000",
                            IsBestSeller = false,
                            IsDeleted = false,
                            IsFeatured = false,
                            IsNewArrival = false,
                            Pages = 395,
                            Publisher = "Schumm, Greenholt and Willms",
                            Title = "Dicta aliquid repellat.",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Year = 2024
                        },
                        new
                        {
                            Id = 10,
                            Author = "Maximillian Moore",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Ea id enim sit veritatis. Esse sunt et voluptatem quibusdam quia. Voluptatum reiciendis quibusdam sapiente vel eligendi fugit inventore qui. Architecto quasi placeat eum quasi ad esse quia vitae.",
                            GenreId = 5,
                            ISBN = "b0ccb0e2-149d-9cec-c1de-5eb2ed5a6fb1",
                            Image = "https://drive.google.com/thumbnail?id=1kSEao7g56ZMPYkBxqCQi70rpfxSqGvMK&sz=w1000",
                            IsBestSeller = false,
                            IsDeleted = false,
                            IsFeatured = false,
                            IsNewArrival = false,
                            Pages = 422,
                            Publisher = "Pacocha, Beier and Jacobson",
                            Title = "Dolore rem nostrum.",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Year = 2024
                        },
                        new
                        {
                            Id = 11,
                            Author = "Grace Rempel",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "A consequatur et mollitia. Quibusdam sed assumenda. Aut alias quis consequatur omnis optio est esse ipsa voluptatem. Est placeat omnis dolore consequuntur sit est. Porro consectetur enim qui tempora et rerum voluptate.",
                            GenreId = 3,
                            ISBN = "ee0fc940-a8d6-ec62-044f-fa410b9aea09",
                            Image = "https://drive.google.com/thumbnail?id=1dwug9Rd51uRSIR61N0de32UGuZ1Ns3WH&sz=w1000",
                            IsBestSeller = false,
                            IsDeleted = false,
                            IsFeatured = false,
                            IsNewArrival = false,
                            Pages = 405,
                            Publisher = "Kohler, Gusikowski and Ernser",
                            Title = "Modi labore sit.",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Year = 2023
                        },
                        new
                        {
                            Id = 12,
                            Author = "Alisha Jacobi",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Officia magni officiis assumenda. Quia quos rem. Aperiam assumenda reprehenderit assumenda. Minima quibusdam corporis quos quod voluptas.",
                            GenreId = 4,
                            ISBN = "8d4ba020-f8c2-2a55-809a-5e4a991938c3",
                            Image = "https://drive.google.com/thumbnail?id=1UCje5bgDDxlWMWdYSK8tRgwMp-LkYM27&sz=w1000",
                            IsBestSeller = false,
                            IsDeleted = false,
                            IsFeatured = false,
                            IsNewArrival = false,
                            Pages = 376,
                            Publisher = "Bednar, Wunsch and Lakin",
                            Title = "Dolorum quia velit.",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Year = 2024
                        },
                        new
                        {
                            Id = 13,
                            Author = "Herta Lebsack",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Quidem praesentium aut ex fugit sapiente at consequatur enim blanditiis. Expedita commodi exercitationem voluptate odio et atque aspernatur eveniet. Illum et perspiciatis deserunt ut magnam reprehenderit et.",
                            GenreId = 4,
                            ISBN = "968f286e-b929-4374-bc54-fa6364439ad3",
                            Image = "https://drive.google.com/thumbnail?id=17pwzIwvq6pyTJyqQ9ooT7dRXMwIHVNeU&sz=w1000",
                            IsBestSeller = false,
                            IsDeleted = false,
                            IsFeatured = false,
                            IsNewArrival = false,
                            Pages = 412,
                            Publisher = "Marvin, Hansen and Braun",
                            Title = "Impedit quis voluptas.",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Year = 2024
                        },
                        new
                        {
                            Id = 14,
                            Author = "Riley Ziemann",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Voluptas aut unde soluta et aspernatur iste in. Voluptates ad delectus id. Et veritatis et nisi rerum reprehenderit officia rerum consequatur. Tempora assumenda iure. Alias hic aliquam molestiae alias voluptatum distinctio.",
                            GenreId = 3,
                            ISBN = "6ec7b325-e32f-8c4d-1ec7-d8c3ddc42bfc",
                            Image = "https://drive.google.com/thumbnail?id=1VGdbU9YQSgzTyesLYdt6xgANcWlOzVlX&sz=w1000",
                            IsBestSeller = false,
                            IsDeleted = false,
                            IsFeatured = false,
                            IsNewArrival = false,
                            Pages = 195,
                            Publisher = "Von, Stracke and Brekke",
                            Title = "Voluptatibus odit est.",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Year = 2024
                        },
                        new
                        {
                            Id = 15,
                            Author = "Palma Schaefer",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Consequatur doloribus quis alias voluptas animi. Quia ex aut dolorum nostrum fugiat quo voluptas aut. Provident et hic repudiandae. Quia molestiae nostrum blanditiis. Quod recusandae harum aliquid cumque ea magni.",
                            GenreId = 4,
                            ISBN = "4d30eeca-53fe-9b00-7d69-64293064c1b6",
                            Image = "https://drive.google.com/thumbnail?id=1-wmBdCw9y0cuT_jaYQVd8zUtQ5Y6WydG&sz=w1000",
                            IsBestSeller = false,
                            IsDeleted = false,
                            IsFeatured = false,
                            IsNewArrival = false,
                            Pages = 414,
                            Publisher = "Kertzmann LLC",
                            Title = "Sed voluptates mollitia.",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Year = 2024
                        },
                        new
                        {
                            Id = 16,
                            Author = "Gerhard Bailey",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Corporis in harum in rem quidem et. Dolores et ipsum quae ullam esse expedita ipsa. Facere in nam reprehenderit rerum.",
                            GenreId = 2,
                            ISBN = "e6ba9ea9-2339-471b-83df-6e8fc631752c",
                            Image = "https://drive.google.com/thumbnail?id=17LCGXsaF8chECGxR5IXHkj5qc7UrWIqw&sz=w1000",
                            IsBestSeller = false,
                            IsDeleted = false,
                            IsFeatured = false,
                            IsNewArrival = false,
                            Pages = 199,
                            Publisher = "Morar, Carroll and Zboncak",
                            Title = "Sed eligendi mollitia.",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Year = 2024
                        },
                        new
                        {
                            Id = 17,
                            Author = "Krista Koss",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Qui quod est assumenda dolorum et quod quas. Neque tenetur qui illo quia dolores. Maiores harum aut nobis sequi iusto dolorem distinctio sint.",
                            GenreId = 1,
                            ISBN = "e2483685-b29b-0d9c-fb9d-8d809c85519e",
                            Image = "https://drive.google.com/thumbnail?id=1V5-GfhMxAUE5QhKYGDtE1XlAjl3sRZFN&sz=w1000",
                            IsBestSeller = false,
                            IsDeleted = false,
                            IsFeatured = false,
                            IsNewArrival = false,
                            Pages = 340,
                            Publisher = "Botsford - Metz",
                            Title = "Quibusdam eligendi aut.",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Year = 2024
                        },
                        new
                        {
                            Id = 18,
                            Author = "Zoe Kris",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Similique tempore vitae et molestias illum et tempore. Quia vel ut. Error molestiae odit quia omnis temporibus. Id molestiae magni dolorem voluptas inventore qui omnis. Culpa provident repudiandae inventore quod quis laborum libero quia.",
                            GenreId = 1,
                            ISBN = "5ff55bf7-e75e-d5a7-020d-87c0cd75b7fc",
                            Image = "https://drive.google.com/thumbnail?id=129hAaWbWcEXubYXVEy2-a4Gbs0ulv9La&sz=w1000",
                            IsBestSeller = false,
                            IsDeleted = false,
                            IsFeatured = false,
                            IsNewArrival = false,
                            Pages = 194,
                            Publisher = "Pouros, Anderson and Nader",
                            Title = "Sequi ut repellendus.",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Year = 2024
                        },
                        new
                        {
                            Id = 19,
                            Author = "Esmeralda Bednar",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Quisquam voluptate et incidunt optio perspiciatis. Ullam praesentium amet dolor rerum quia ea temporibus sint optio. Sit aspernatur nobis est illum itaque placeat odit ipsam. Quia labore quaerat quia esse cupiditate molestias dolorem laborum quas. Vel accusamus ducimus necessitatibus et ut ipsam laborum accusamus. Neque consequatur a nam consequatur sed sapiente mollitia.",
                            GenreId = 4,
                            ISBN = "528cd54b-2d22-eef1-e375-f64926d0a111",
                            Image = "https://drive.google.com/thumbnail?id=1iS1vCXQNst3Cm0hkq0m9m53HlFXB2e_b&sz=w1000",
                            IsBestSeller = false,
                            IsDeleted = false,
                            IsFeatured = false,
                            IsNewArrival = false,
                            Pages = 212,
                            Publisher = "Mraz, Maggio and Schuppe",
                            Title = "Similique sapiente harum.",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Year = 2024
                        },
                        new
                        {
                            Id = 20,
                            Author = "Haylee Baumbach",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Veritatis rerum velit necessitatibus pariatur sint laborum cumque perspiciatis. Totam atque fuga quod sequi. Soluta nulla aut excepturi officiis distinctio aperiam voluptas est. Et voluptatem dolore qui ratione. Quasi ex doloremque ratione omnis earum a consequatur soluta.",
                            GenreId = 3,
                            ISBN = "76737be1-a907-8d2e-692e-de7e5993b8e5",
                            Image = "https://drive.google.com/thumbnail?id=1EsQ7X9KyU57dg3N3AjHn_xtUtauiElDF&sz=w1000",
                            IsBestSeller = false,
                            IsDeleted = false,
                            IsFeatured = false,
                            IsNewArrival = false,
                            Pages = 445,
                            Publisher = "Medhurst, Lockman and Hegmann",
                            Title = "Ut laudantium ab.",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Year = 2024
                        });
                });

            modelBuilder.Entity("code_assessment_api.Models.BookTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CheckInTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CheckOutTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("CheckedInById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CheckedOutById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DueTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("CheckedInById");

                    b.HasIndex("CheckedOutById");

                    b.HasIndex("UserId");

                    b.ToTable("BookTransaction");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BookId = 4,
                            CheckOutTime = new DateTime(2024, 7, 18, 18, 59, 49, 612, DateTimeKind.Local).AddTicks(559),
                            CheckedOutById = "5",
                            DueTime = new DateTime(2026, 10, 26, 0, 1, 50, 404, DateTimeKind.Local).AddTicks(4382),
                            UserId = "3"
                        },
                        new
                        {
                            Id = 2,
                            BookId = 15,
                            CheckOutTime = new DateTime(2024, 7, 17, 21, 7, 21, 488, DateTimeKind.Local).AddTicks(5705),
                            CheckedOutById = "5",
                            DueTime = new DateTime(2028, 4, 10, 3, 46, 21, 382, DateTimeKind.Local).AddTicks(1141),
                            UserId = "1"
                        },
                        new
                        {
                            Id = 3,
                            BookId = 3,
                            CheckOutTime = new DateTime(2024, 7, 19, 0, 3, 41, 974, DateTimeKind.Local).AddTicks(8878),
                            CheckedOutById = "5",
                            DueTime = new DateTime(2026, 8, 31, 14, 28, 1, 426, DateTimeKind.Local).AddTicks(5445),
                            UserId = "3"
                        },
                        new
                        {
                            Id = 4,
                            BookId = 14,
                            CheckOutTime = new DateTime(2024, 7, 16, 3, 53, 3, 562, DateTimeKind.Local).AddTicks(9398),
                            CheckedOutById = "5",
                            DueTime = new DateTime(2024, 7, 25, 2, 48, 58, 359, DateTimeKind.Local).AddTicks(6670),
                            UserId = "1"
                        },
                        new
                        {
                            Id = 5,
                            BookId = 14,
                            CheckOutTime = new DateTime(2024, 7, 19, 0, 0, 32, 659, DateTimeKind.Local).AddTicks(2462),
                            CheckedOutById = "5",
                            DueTime = new DateTime(2029, 1, 6, 17, 12, 20, 957, DateTimeKind.Local).AddTicks(6637),
                            UserId = "4"
                        });
                });

            modelBuilder.Entity("code_assessment_api.Models.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "",
                            Name = "Fiction"
                        },
                        new
                        {
                            Id = 2,
                            Description = "",
                            Name = "Non-Fiction"
                        },
                        new
                        {
                            Id = 3,
                            Description = "",
                            Name = "Self-Help"
                        },
                        new
                        {
                            Id = 4,
                            Description = "",
                            Name = "Biography"
                        },
                        new
                        {
                            Id = 5,
                            Description = "",
                            Name = "Cookbook"
                        });
                });

            modelBuilder.Entity("code_assessment_api.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("First")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Last")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfilePicture")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3ec2cb53-3f70-4322-bba8-55e97a90aabc",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Lynda.Lesch61@hotmail.com",
                            EmailConfirmed = false,
                            First = "Lynda",
                            Last = "Lesch",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            ProfilePicture = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/766.jpg",
                            SecurityStamp = "ae8faa7c-6a36-4205-b399-e359d074dceb",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "Lynda_Lesch"
                        },
                        new
                        {
                            Id = "2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "544bb51f-22d8-4ed7-aa61-eca07caebfac",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Dustin95@hotmail.com",
                            EmailConfirmed = false,
                            First = "Dustin",
                            Last = "Schmeler",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            ProfilePicture = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/0.jpg",
                            SecurityStamp = "460c0d62-cc85-4890-b608-7f17eb508fe7",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "Dustin.Schmeler48"
                        },
                        new
                        {
                            Id = "3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3f403eeb-4e9e-4850-82c9-6bbf0a2e7242",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Tabitha77@gmail.com",
                            EmailConfirmed = false,
                            First = "Tabitha",
                            Last = "Ebert",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            ProfilePicture = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/502.jpg",
                            SecurityStamp = "761147ce-85cf-4731-921d-5b00ce3b5a38",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "Tabitha13"
                        },
                        new
                        {
                            Id = "4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bf1db8d4-b3f6-42e9-8c8a-5d1d2164098f",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Paulette50@gmail.com",
                            EmailConfirmed = false,
                            First = "Paulette",
                            Last = "O'Kon",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            ProfilePicture = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/562.jpg",
                            SecurityStamp = "d5eebd2b-4fde-46da-bc18-9e117f9e81ba",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "Paulette.OKon"
                        },
                        new
                        {
                            Id = "5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "33812bd9-e503-4737-b14d-e985fe52f507",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Margaret46@gmail.com",
                            EmailConfirmed = false,
                            First = "Margaret",
                            Last = "Cronin",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            ProfilePicture = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/100.jpg",
                            SecurityStamp = "82ced047-f56c-4d2e-b1fe-0097c1ff5aa7",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "Margaret_Cronin"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("code_assessment_api.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("code_assessment_api.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("code_assessment_api.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("code_assessment_api.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("code_assessment_api.Models.Book", b =>
                {
                    b.HasOne("code_assessment_api.Models.Genre", "Genre")
                        .WithMany("Books")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("code_assessment_api.Models.BookTransaction", b =>
                {
                    b.HasOne("code_assessment_api.Models.Book", "Book")
                        .WithMany("Transactions")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("code_assessment_api.Models.User", "CheckedInBy")
                        .WithMany()
                        .HasForeignKey("CheckedInById");

                    b.HasOne("code_assessment_api.Models.User", "CheckedOutBy")
                        .WithMany()
                        .HasForeignKey("CheckedOutById");

                    b.HasOne("code_assessment_api.Models.User", "User")
                        .WithMany("Transactions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("CheckedInBy");

                    b.Navigation("CheckedOutBy");

                    b.Navigation("User");
                });

            modelBuilder.Entity("code_assessment_api.Models.Book", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("code_assessment_api.Models.Genre", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("code_assessment_api.Models.User", b =>
                {
                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
