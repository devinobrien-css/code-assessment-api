// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using code_assessment_api.Data;

#nullable disable

namespace code_assessment_api.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240719230250_BestSellerAndFeatured")]
    partial class BestSellerAndFeatured
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("code_assessment_api.Models.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.Property<string>("ISBN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsBestSeller")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFeatured")
                        .HasColumnType("bit");

                    b.Property<int>("Pages")
                        .HasColumnType("int");

                    b.Property<string>("Publisher")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GenreId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Author = "Chase Ratke",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Facilis quos qui consequuntur. Provident inventore qui ut provident repellendus. Qui pariatur voluptatem expedita et et reprehenderit accusamus odit quaerat.",
                            GenreId = 5,
                            ISBN = "4d96acdd-b52f-9de6-a817-1c5ded980bbf",
                            Image = "https://drive.google.com/thumbnail?id=1zycl7EiCECK541ialA9UCrs9HdfddUQb&sz=w1000",
                            IsBestSeller = false,
                            IsFeatured = true,
                            Pages = 482,
                            Publisher = "Aufderhar - Stamm",
                            Title = "Assumenda provident consequatur.",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Year = 2024
                        },
                        new
                        {
                            Id = 2,
                            Author = "Lindsay Koch",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Placeat et ut. Iusto odit id laborum molestiae quibusdam sunt sed fuga. Est nostrum magnam magni maxime quibusdam dolores rerum consequatur. Magnam veniam reiciendis quisquam. Est odio et eum quia consequatur sed molestias molestiae sunt.",
                            GenreId = 2,
                            ISBN = "20a5b82f-6eba-fc8d-bc16-ff9f36dab455",
                            Image = "https://drive.google.com/thumbnail?id=1C4sRKzQrFUDNQ1X12WVeKbX0knOoC6tA&sz=w1000",
                            IsBestSeller = true,
                            IsFeatured = false,
                            Pages = 186,
                            Publisher = "West - Hayes",
                            Title = "Qui neque nulla.",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Year = 2024
                        },
                        new
                        {
                            Id = 3,
                            Author = "Kaela Labadie",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Odit iusto tempore nemo omnis ea quos nisi et deleniti. Alias quia eum iure nisi illo delectus velit vel. Exercitationem quo nihil quo labore labore. Illo laboriosam officia ratione nemo natus ullam non.",
                            GenreId = 1,
                            ISBN = "bbfb9b08-f8a5-c4c2-a49e-2d931c90a33e",
                            Image = "https://drive.google.com/thumbnail?id=12xFmb08WRoRr5omVtZ38Obo1imbutVlh&sz=w1000",
                            IsBestSeller = false,
                            IsFeatured = true,
                            Pages = 426,
                            Publisher = "Ritchie LLC",
                            Title = "Et beatae qui.",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Year = 2024
                        },
                        new
                        {
                            Id = 4,
                            Author = "Natasha Heaney",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Dignissimos sit qui consequatur id sapiente necessitatibus sapiente. Sapiente fugiat quam voluptas consequatur consequatur nisi. Doloremque suscipit fuga voluptates quaerat in architecto perferendis. Eos est voluptatem sit consequatur impedit error rerum voluptate.",
                            GenreId = 4,
                            ISBN = "3adb764c-6237-e90f-12c8-bc85622c63f2",
                            Image = "https://drive.google.com/thumbnail?id=1bOcpnwGFqsWJVLKxwXC4pdQgo5M1wzDi&sz=w1000",
                            IsBestSeller = false,
                            IsFeatured = true,
                            Pages = 137,
                            Publisher = "Rau - Bergstrom",
                            Title = "Quibusdam aut non.",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Year = 2024
                        },
                        new
                        {
                            Id = 5,
                            Author = "Deven Towne",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Et quam autem rerum ut illum sit omnis et magni. Quaerat occaecati molestiae repellendus porro exercitationem voluptatem neque ipsam est. Aut repellat et sit repudiandae. Est quidem incidunt.",
                            GenreId = 4,
                            ISBN = "fb98eef5-39b6-85c8-5bfb-71c27e200808",
                            Image = "https://drive.google.com/thumbnail?id=1Eu7yiiaAMfb0ktMOKhJZN6htKhF-TPDc&sz=w1000",
                            IsBestSeller = false,
                            IsFeatured = false,
                            Pages = 342,
                            Publisher = "Simonis - Mraz",
                            Title = "Sequi est fugiat.",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Year = 2024
                        },
                        new
                        {
                            Id = 6,
                            Author = "Larissa Marks",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "In ut deleniti laborum eaque aspernatur architecto. Culpa id expedita et. Quo necessitatibus accusantium fuga error voluptatibus voluptatem. Adipisci fuga explicabo pariatur error facere reiciendis minus voluptatibus.",
                            GenreId = 4,
                            ISBN = "b36976a5-349a-c5d4-20e5-acb82f2f88e2",
                            Image = "https://drive.google.com/thumbnail?id=1Hk2fvOg7hpmRwKWc-QTl82NGerqKib71&sz=w1000",
                            IsBestSeller = true,
                            IsFeatured = false,
                            Pages = 483,
                            Publisher = "Schultz, Rath and Hermiston",
                            Title = "Praesentium quis vitae.",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Year = 2024
                        },
                        new
                        {
                            Id = 7,
                            Author = "Darron Bernier",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Incidunt tempore rerum laboriosam quis earum possimus alias dignissimos deserunt. Sint sunt deserunt alias repellendus sit non harum in. Molestiae et esse. Dicta molestiae ut aut vitae molestias laudantium quis.",
                            GenreId = 3,
                            ISBN = "869c8a80-526b-cba6-7d67-77f50885edef",
                            Image = "https://drive.google.com/thumbnail?id=1cozBSsETbbn8YWA27-cyfpxAgOKX-FwJ&sz=w1000",
                            IsBestSeller = true,
                            IsFeatured = false,
                            Pages = 355,
                            Publisher = "Wisoky, Homenick and Powlowski",
                            Title = "Laborum omnis odio.",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Year = 2023
                        },
                        new
                        {
                            Id = 8,
                            Author = "Chad Maggio",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Est ut reprehenderit architecto facilis in sint iure sed tempora. Sequi qui amet velit. Dolorum quia qui.",
                            GenreId = 5,
                            ISBN = "25c0a792-e3ea-4eeb-3347-bbc2d14bea99",
                            Image = "https://drive.google.com/thumbnail?id=1X_DcLIDCuXHtlh2LDJrS07h8lNcK1vXl&sz=w1000",
                            IsBestSeller = false,
                            IsFeatured = false,
                            Pages = 132,
                            Publisher = "Howe, Cummings and Botsford",
                            Title = "Doloribus natus ipsam.",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Year = 2024
                        },
                        new
                        {
                            Id = 9,
                            Author = "Emmie Kuhic",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Fuga rerum sed odio. Inventore totam aut explicabo saepe veniam. Provident dignissimos provident.",
                            GenreId = 2,
                            ISBN = "3872ebd5-fba1-15de-cb2c-fac8994deb27",
                            Image = "https://drive.google.com/thumbnail?id=1UMX2PhE5C46EQuRL8UkbdUqIKGuBNbJ5&sz=w1000",
                            IsBestSeller = false,
                            IsFeatured = true,
                            Pages = 115,
                            Publisher = "Kilback Group",
                            Title = "Sit et debitis.",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Year = 2023
                        },
                        new
                        {
                            Id = 10,
                            Author = "Ashton Little",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Nam est sit sequi quis est. Voluptas delectus omnis est quis enim tempora deserunt distinctio sit. Et excepturi architecto.",
                            GenreId = 2,
                            ISBN = "0ced44bc-d89a-0403-c63b-49535bd9165b",
                            Image = "https://drive.google.com/thumbnail?id=1kSEao7g56ZMPYkBxqCQi70rpfxSqGvMK&sz=w1000",
                            IsBestSeller = false,
                            IsFeatured = true,
                            Pages = 494,
                            Publisher = "Kulas - Von",
                            Title = "Harum odio id.",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Year = 2023
                        },
                        new
                        {
                            Id = 11,
                            Author = "Braulio Kemmer",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Numquam architecto maxime quod beatae. Impedit ad qui ullam dolor ipsam sit hic perspiciatis. Aspernatur iste pariatur alias quis rem quo aut. Distinctio natus inventore est occaecati ut consequatur vel quis perferendis. Quidem maiores laudantium ducimus officia in molestias est voluptatem. Saepe aspernatur consectetur optio id et quis sint fugiat.",
                            GenreId = 5,
                            ISBN = "5b1fede0-acc1-3fd0-6c1e-271aad1837af",
                            Image = "https://drive.google.com/thumbnail?id=1dwug9Rd51uRSIR61N0de32UGuZ1Ns3WH&sz=w1000",
                            IsBestSeller = true,
                            IsFeatured = true,
                            Pages = 201,
                            Publisher = "Lueilwitz and Sons",
                            Title = "Quisquam perferendis nam.",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Year = 2024
                        },
                        new
                        {
                            Id = 12,
                            Author = "Melyssa Runolfsson",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Tenetur sed quibusdam minus neque recusandae non voluptates minus hic. Aut ipsa dolor dolores dolor hic ut et. Ea fugiat accusamus ipsa ipsam iure non veniam laboriosam minima.",
                            GenreId = 2,
                            ISBN = "39d2fda8-ed15-cbce-cf3f-1805bdb7fd42",
                            Image = "https://drive.google.com/thumbnail?id=1UCje5bgDDxlWMWdYSK8tRgwMp-LkYM27&sz=w1000",
                            IsBestSeller = true,
                            IsFeatured = false,
                            Pages = 481,
                            Publisher = "Cartwright, Homenick and Hansen",
                            Title = "Rerum labore enim.",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Year = 2024
                        },
                        new
                        {
                            Id = 13,
                            Author = "Cole Dach",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Qui ipsum quam impedit aliquam dolor dolorem velit. Veritatis sapiente quas error harum. Sint modi fuga rem sit.",
                            GenreId = 1,
                            ISBN = "a108ffcc-f259-d1f8-05fb-01c92bc90414",
                            Image = "https://drive.google.com/thumbnail?id=17pwzIwvq6pyTJyqQ9ooT7dRXMwIHVNeU&sz=w1000",
                            IsBestSeller = false,
                            IsFeatured = false,
                            Pages = 342,
                            Publisher = "Mante - Pagac",
                            Title = "Numquam placeat sapiente.",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Year = 2024
                        },
                        new
                        {
                            Id = 14,
                            Author = "Jerrell Hilll",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Optio quia quia quas veniam itaque ea aut molestiae voluptas. Quaerat et a quia amet. Quisquam unde voluptate. Perferendis laboriosam eaque est quo impedit. Soluta ut rerum voluptates maxime.",
                            GenreId = 1,
                            ISBN = "a5c8da3e-3f1c-3104-1961-3e56e1a404dd",
                            Image = "https://drive.google.com/thumbnail?id=1VGdbU9YQSgzTyesLYdt6xgANcWlOzVlX&sz=w1000",
                            IsBestSeller = false,
                            IsFeatured = false,
                            Pages = 203,
                            Publisher = "Daugherty, Lind and Kuhn",
                            Title = "Et nostrum voluptate.",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Year = 2023
                        },
                        new
                        {
                            Id = 15,
                            Author = "Jackson Farrell",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Quis doloribus voluptatem fuga itaque ipsa explicabo eius qui. Et nisi blanditiis eum. A quia reiciendis aut minima qui qui. Facilis dolorem cumque incidunt consequatur commodi maiores ut. Sit repudiandae explicabo quisquam beatae ut mollitia ut sapiente et.",
                            GenreId = 5,
                            ISBN = "ebe88e3d-093f-eb08-0f69-ecb9347e4178",
                            Image = "https://drive.google.com/thumbnail?id=1-wmBdCw9y0cuT_jaYQVd8zUtQ5Y6WydG&sz=w1000",
                            IsBestSeller = false,
                            IsFeatured = false,
                            Pages = 201,
                            Publisher = "Abernathy - Yost",
                            Title = "Cumque itaque consequuntur.",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Year = 2024
                        },
                        new
                        {
                            Id = 16,
                            Author = "Gertrude Russel",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Quia quia magni commodi. Quia itaque vitae aliquid enim dicta. Aliquid quos debitis molestias distinctio est velit.",
                            GenreId = 4,
                            ISBN = "bc768677-ea53-fce9-e5b3-caa350e2e426",
                            Image = "https://drive.google.com/thumbnail?id=17LCGXsaF8chECGxR5IXHkj5qc7UrWIqw&sz=w1000",
                            IsBestSeller = false,
                            IsFeatured = false,
                            Pages = 367,
                            Publisher = "Stroman LLC",
                            Title = "Est tenetur laboriosam.",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Year = 2024
                        },
                        new
                        {
                            Id = 17,
                            Author = "Brisa Senger",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Nam eum et. Hic excepturi at voluptatibus. Voluptatem possimus adipisci et doloremque possimus tenetur. Mollitia at in. Quis tenetur tempore eaque tempore id.",
                            GenreId = 5,
                            ISBN = "ed89564a-9483-07da-8b53-467ebe607c3d",
                            Image = "https://drive.google.com/thumbnail?id=1V5-GfhMxAUE5QhKYGDtE1XlAjl3sRZFN&sz=w1000",
                            IsBestSeller = false,
                            IsFeatured = false,
                            Pages = 254,
                            Publisher = "Oberbrunner LLC",
                            Title = "Sit sed facere.",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Year = 2024
                        },
                        new
                        {
                            Id = 18,
                            Author = "Mauricio Funk",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Cum sequi est cumque quaerat aspernatur debitis. Enim non in natus rem dolor dolorem similique. Laudantium voluptatem voluptas harum qui et aut repudiandae sed quas. Est ea qui sed sit est aut fugiat quia. Eum magni et ut labore. In perferendis sint id eligendi non minus.",
                            GenreId = 3,
                            ISBN = "f1afb1c0-a7cf-cf1b-6920-ec5705a65c7d",
                            Image = "https://drive.google.com/thumbnail?id=129hAaWbWcEXubYXVEy2-a4Gbs0ulv9La&sz=w1000",
                            IsBestSeller = true,
                            IsFeatured = true,
                            Pages = 189,
                            Publisher = "Schultz and Sons",
                            Title = "Ea cumque quod.",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Year = 2023
                        },
                        new
                        {
                            Id = 19,
                            Author = "Kenya Reinger",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Ea iste vero a quis ut et. Consequatur et officiis quod sed. Voluptates et quos. Voluptatem beatae blanditiis commodi explicabo eos et possimus rerum.",
                            GenreId = 4,
                            ISBN = "d7568597-a115-8da8-013d-c3535fff5f01",
                            Image = "https://drive.google.com/thumbnail?id=1iS1vCXQNst3Cm0hkq0m9m53HlFXB2e_b&sz=w1000",
                            IsBestSeller = false,
                            IsFeatured = false,
                            Pages = 428,
                            Publisher = "Quigley, Windler and Cremin",
                            Title = "Voluptates quas consequatur.",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Year = 2023
                        },
                        new
                        {
                            Id = 20,
                            Author = "David Larkin",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Dolores omnis at quod ipsam fugiat fugiat dolores. Maiores perferendis est quidem reprehenderit et voluptate culpa. Dolores cum aperiam tempora. Ab et maxime dolorum et quae omnis praesentium. Omnis voluptatum voluptatem ad eaque et autem voluptatum molestias consequatur. Ut quis voluptatum rerum.",
                            GenreId = 3,
                            ISBN = "5457e10a-55cf-efb5-b2a8-9d745564eb2c",
                            Image = "https://drive.google.com/thumbnail?id=1EsQ7X9KyU57dg3N3AjHn_xtUtauiElDF&sz=w1000",
                            IsBestSeller = true,
                            IsFeatured = false,
                            Pages = 119,
                            Publisher = "Kozey - Torp",
                            Title = "Dolorum dolores assumenda.",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Year = 2023
                        });
                });

            modelBuilder.Entity("code_assessment_api.Models.BookTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CheckInTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CheckOutTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("CheckedInById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CheckedOutById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DueTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("CheckedInById");

                    b.HasIndex("CheckedOutById");

                    b.HasIndex("UserId");

                    b.ToTable("BookTransactions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BookId = 20,
                            CheckOutTime = new DateTime(2024, 7, 19, 19, 2, 49, 849, DateTimeKind.Local).AddTicks(7910),
                            CheckedOutById = "5",
                            DueTime = new DateTime(2024, 7, 24, 19, 2, 49, 849, DateTimeKind.Local).AddTicks(8890),
                            UserId = "3"
                        },
                        new
                        {
                            Id = 2,
                            BookId = 5,
                            CheckOutTime = new DateTime(2024, 7, 19, 19, 2, 49, 849, DateTimeKind.Local).AddTicks(7910),
                            CheckedOutById = "5",
                            DueTime = new DateTime(2024, 7, 24, 19, 2, 49, 849, DateTimeKind.Local).AddTicks(9420),
                            UserId = "1"
                        },
                        new
                        {
                            Id = 3,
                            BookId = 12,
                            CheckOutTime = new DateTime(2024, 7, 19, 19, 2, 49, 849, DateTimeKind.Local).AddTicks(7910),
                            CheckedOutById = "5",
                            DueTime = new DateTime(2024, 7, 24, 19, 2, 49, 849, DateTimeKind.Local).AddTicks(9430),
                            UserId = "1"
                        },
                        new
                        {
                            Id = 4,
                            BookId = 2,
                            CheckOutTime = new DateTime(2024, 7, 19, 19, 2, 49, 849, DateTimeKind.Local).AddTicks(7910),
                            CheckedOutById = "5",
                            DueTime = new DateTime(2024, 7, 24, 19, 2, 49, 849, DateTimeKind.Local).AddTicks(9440),
                            UserId = "1"
                        },
                        new
                        {
                            Id = 5,
                            BookId = 1,
                            CheckOutTime = new DateTime(2024, 7, 19, 19, 2, 49, 849, DateTimeKind.Local).AddTicks(7910),
                            CheckedOutById = "5",
                            DueTime = new DateTime(2024, 7, 24, 19, 2, 49, 849, DateTimeKind.Local).AddTicks(9450),
                            UserId = "4"
                        });
                });

            modelBuilder.Entity("code_assessment_api.Models.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "",
                            Name = "Fiction"
                        },
                        new
                        {
                            Id = 2,
                            Description = "",
                            Name = "Non-Fiction"
                        },
                        new
                        {
                            Id = 3,
                            Description = "",
                            Name = "Self-Help"
                        },
                        new
                        {
                            Id = 4,
                            Description = "",
                            Name = "Biography"
                        },
                        new
                        {
                            Id = 5,
                            Description = "",
                            Name = "Cookbook"
                        });
                });

            modelBuilder.Entity("code_assessment_api.Models.ProfileAvatar", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProfileAvatars");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Url = "https://robohash.org/1"
                        },
                        new
                        {
                            Id = 2,
                            Url = "https://robohash.org/2"
                        },
                        new
                        {
                            Id = 3,
                            Url = "https://robohash.org/3"
                        },
                        new
                        {
                            Id = 4,
                            Url = "https://robohash.org/4"
                        },
                        new
                        {
                            Id = 5,
                            Url = "https://robohash.org/5"
                        },
                        new
                        {
                            Id = 6,
                            Url = "https://robohash.org/6"
                        },
                        new
                        {
                            Id = 7,
                            Url = "https://robohash.org/7"
                        },
                        new
                        {
                            Id = 8,
                            Url = "https://robohash.org/8"
                        },
                        new
                        {
                            Id = 9,
                            Url = "https://robohash.org/9"
                        },
                        new
                        {
                            Id = 10,
                            Url = "https://robohash.org/10"
                        },
                        new
                        {
                            Id = 11,
                            Url = "https://robohash.org/11"
                        },
                        new
                        {
                            Id = 12,
                            Url = "https://robohash.org/12"
                        },
                        new
                        {
                            Id = 13,
                            Url = "https://robohash.org/13"
                        },
                        new
                        {
                            Id = 14,
                            Url = "https://robohash.org/14"
                        },
                        new
                        {
                            Id = 15,
                            Url = "https://robohash.org/15"
                        },
                        new
                        {
                            Id = 16,
                            Url = "https://robohash.org/16"
                        },
                        new
                        {
                            Id = 17,
                            Url = "https://robohash.org/17"
                        },
                        new
                        {
                            Id = 18,
                            Url = "https://robohash.org/18"
                        },
                        new
                        {
                            Id = 19,
                            Url = "https://robohash.org/19"
                        },
                        new
                        {
                            Id = 20,
                            Url = "https://robohash.org/20"
                        },
                        new
                        {
                            Id = 21,
                            Url = "https://robohash.org/21"
                        },
                        new
                        {
                            Id = 22,
                            Url = "https://robohash.org/22"
                        },
                        new
                        {
                            Id = 23,
                            Url = "https://robohash.org/23"
                        },
                        new
                        {
                            Id = 24,
                            Url = "https://robohash.org/24"
                        },
                        new
                        {
                            Id = 25,
                            Url = "https://robohash.org/25"
                        },
                        new
                        {
                            Id = 26,
                            Url = "https://robohash.org/26"
                        },
                        new
                        {
                            Id = 27,
                            Url = "https://robohash.org/27"
                        },
                        new
                        {
                            Id = 28,
                            Url = "https://robohash.org/28"
                        },
                        new
                        {
                            Id = 29,
                            Url = "https://robohash.org/29"
                        },
                        new
                        {
                            Id = 30,
                            Url = "https://robohash.org/30"
                        },
                        new
                        {
                            Id = 31,
                            Url = "https://robohash.org/31"
                        },
                        new
                        {
                            Id = 32,
                            Url = "https://robohash.org/32"
                        },
                        new
                        {
                            Id = 33,
                            Url = "https://robohash.org/33"
                        },
                        new
                        {
                            Id = 34,
                            Url = "https://robohash.org/34"
                        },
                        new
                        {
                            Id = 35,
                            Url = "https://robohash.org/35"
                        });
                });

            modelBuilder.Entity("code_assessment_api.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("First")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Last")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int?>("ProfileAvatarId")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("ProfileAvatarId");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "214f01d3-2c73-4ee0-975b-03e2709be093",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Pearl39@hotmail.com",
                            EmailConfirmed = false,
                            First = "Pearl",
                            Last = "Kuphal",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            ProfileAvatarId = 8,
                            SecurityStamp = "f821d599-b1d9-41aa-9c68-cb2d4087d625",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "Pearl.Kuphal"
                        },
                        new
                        {
                            Id = "2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1e337f6a-c155-4e53-b040-7293a7b010e7",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Joanna_Metz@gmail.com",
                            EmailConfirmed = false,
                            First = "Joanna",
                            Last = "Metz",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            ProfileAvatarId = 27,
                            SecurityStamp = "7cea8a00-a024-4c78-a1f4-16b20b5feefc",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "Joanna_Metz"
                        },
                        new
                        {
                            Id = "3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "36e144b2-5106-4a79-a2f4-ba15e18f089d",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Mamie24@yahoo.com",
                            EmailConfirmed = false,
                            First = "Mamie",
                            Last = "Walker",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            ProfileAvatarId = 19,
                            SecurityStamp = "1e3e845d-9661-40ab-872a-509eaa4a5325",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "Mamie64"
                        },
                        new
                        {
                            Id = "4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8db46be3-0efa-4279-960d-e6e7a1c9bba2",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Vera52@gmail.com",
                            EmailConfirmed = false,
                            First = "Vera",
                            Last = "Huel",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            ProfileAvatarId = 30,
                            SecurityStamp = "04e6db43-d562-43b0-ba6b-478a573506d3",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "Vera_Huel41"
                        },
                        new
                        {
                            Id = "5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3ebe62ce-b276-4379-96db-277c74a819b8",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Crystal_Lakin7@gmail.com",
                            EmailConfirmed = false,
                            First = "Crystal",
                            Last = "Lakin",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            ProfileAvatarId = 18,
                            SecurityStamp = "6cd2a630-5e67-4060-89a9-a1d807b0e6c6",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "Crystal55"
                        });
                });

            modelBuilder.Entity("code_assessment_api.Models.UserFavoritesBook", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId");

                    b.ToTable("UserFavoritesbooks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BookId = 1,
                            UserId = "1"
                        },
                        new
                        {
                            Id = 2,
                            BookId = 2,
                            UserId = "1"
                        },
                        new
                        {
                            Id = 3,
                            BookId = 3,
                            UserId = "1"
                        },
                        new
                        {
                            Id = 4,
                            BookId = 4,
                            UserId = "1"
                        },
                        new
                        {
                            Id = 5,
                            BookId = 5,
                            UserId = "1"
                        },
                        new
                        {
                            Id = 6,
                            BookId = 4,
                            UserId = "2"
                        },
                        new
                        {
                            Id = 7,
                            BookId = 5,
                            UserId = "2"
                        },
                        new
                        {
                            Id = 8,
                            BookId = 6,
                            UserId = "2"
                        },
                        new
                        {
                            Id = 9,
                            BookId = 7,
                            UserId = "2"
                        },
                        new
                        {
                            Id = 10,
                            BookId = 8,
                            UserId = "2"
                        },
                        new
                        {
                            Id = 11,
                            BookId = 9,
                            UserId = "2"
                        },
                        new
                        {
                            Id = 12,
                            BookId = 1,
                            UserId = "3"
                        },
                        new
                        {
                            Id = 13,
                            BookId = 2,
                            UserId = "3"
                        },
                        new
                        {
                            Id = 14,
                            BookId = 3,
                            UserId = "3"
                        },
                        new
                        {
                            Id = 15,
                            BookId = 4,
                            UserId = "3"
                        },
                        new
                        {
                            Id = 16,
                            BookId = 5,
                            UserId = "3"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("code_assessment_api.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("code_assessment_api.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("code_assessment_api.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("code_assessment_api.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("code_assessment_api.Models.Book", b =>
                {
                    b.HasOne("code_assessment_api.Models.Genre", "Genre")
                        .WithMany("Books")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("code_assessment_api.Models.BookTransaction", b =>
                {
                    b.HasOne("code_assessment_api.Models.Book", "Book")
                        .WithMany("Transactions")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("code_assessment_api.Models.User", "CheckedInBy")
                        .WithMany()
                        .HasForeignKey("CheckedInById");

                    b.HasOne("code_assessment_api.Models.User", "CheckedOutBy")
                        .WithMany()
                        .HasForeignKey("CheckedOutById");

                    b.HasOne("code_assessment_api.Models.User", "User")
                        .WithMany("Transactions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("CheckedInBy");

                    b.Navigation("CheckedOutBy");

                    b.Navigation("User");
                });

            modelBuilder.Entity("code_assessment_api.Models.User", b =>
                {
                    b.HasOne("code_assessment_api.Models.ProfileAvatar", "ProfileAvatar")
                        .WithMany("Users")
                        .HasForeignKey("ProfileAvatarId");

                    b.Navigation("ProfileAvatar");
                });

            modelBuilder.Entity("code_assessment_api.Models.UserFavoritesBook", b =>
                {
                    b.HasOne("code_assessment_api.Models.Book", "Book")
                        .WithMany("Favorites")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("code_assessment_api.Models.User", "User")
                        .WithMany("Favorites")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("code_assessment_api.Models.Book", b =>
                {
                    b.Navigation("Favorites");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("code_assessment_api.Models.Genre", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("code_assessment_api.Models.ProfileAvatar", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("code_assessment_api.Models.User", b =>
                {
                    b.Navigation("Favorites");

                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
