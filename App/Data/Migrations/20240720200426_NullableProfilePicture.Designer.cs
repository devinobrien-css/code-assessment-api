// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using code_assessment_api.Data;

#nullable disable

namespace code_assessment_api.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240720200426_NullableProfilePicture")]
    partial class NullableProfilePicture
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("code_assessment_api.Models.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.Property<string>("ISBN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsBestSeller")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFeatured")
                        .HasColumnType("bit");

                    b.Property<int>("Pages")
                        .HasColumnType("int");

                    b.Property<string>("Publisher")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GenreId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Author = "Frederic Deckow",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Quibusdam ea voluptas modi voluptates doloremque enim est voluptate. Architecto voluptatum ut sed eius veniam. Et cumque temporibus incidunt et eveniet repellendus. Aliquid commodi omnis in. Unde ab facere beatae.",
                            GenreId = 3,
                            ISBN = "cd7711ca-1353-394d-7a97-aa7cc6b3ac2d",
                            Image = "https://drive.google.com/thumbnail?id=1zycl7EiCECK541ialA9UCrs9HdfddUQb&sz=w1000",
                            IsBestSeller = false,
                            IsFeatured = false,
                            Pages = 355,
                            Publisher = "Champlin Inc",
                            Title = "Veritatis dicta vitae.",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Year = 2024
                        },
                        new
                        {
                            Id = 2,
                            Author = "Hollis Nolan",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Vel harum non qui culpa reiciendis quod aut. Voluptas ducimus consectetur eos. Similique et officiis ullam vitae non qui.",
                            GenreId = 5,
                            ISBN = "3a193672-fdec-4fd0-8805-ca2d2679fcdc",
                            Image = "https://drive.google.com/thumbnail?id=1C4sRKzQrFUDNQ1X12WVeKbX0knOoC6tA&sz=w1000",
                            IsBestSeller = true,
                            IsFeatured = false,
                            Pages = 104,
                            Publisher = "Bins, Baumbach and Emmerich",
                            Title = "Quibusdam recusandae necessitatibus.",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Year = 2023
                        },
                        new
                        {
                            Id = 3,
                            Author = "Floyd Conn",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Sit qui fugit sed sapiente qui. Omnis dolores saepe pariatur sunt. Qui qui suscipit mollitia sed eius quidem alias sint.",
                            GenreId = 3,
                            ISBN = "a85f1ea0-cc76-a460-9c3a-1e104330f8b4",
                            Image = "https://drive.google.com/thumbnail?id=12xFmb08WRoRr5omVtZ38Obo1imbutVlh&sz=w1000",
                            IsBestSeller = false,
                            IsFeatured = false,
                            Pages = 451,
                            Publisher = "Koch LLC",
                            Title = "Quidem voluptatibus velit.",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Year = 2023
                        },
                        new
                        {
                            Id = 4,
                            Author = "Brandi Donnelly",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Error quia ex ea dolorem dignissimos quam quia sit. Harum reiciendis numquam saepe. Ipsa occaecati aliquid aut numquam ducimus. Natus similique dicta quos cum voluptatum. Animi recusandae quae omnis ex sit est ducimus consequatur repellat. Repudiandae exercitationem facilis temporibus dolores nesciunt ut quod.",
                            GenreId = 3,
                            ISBN = "e2762d5d-9e14-e4a7-bab6-81c16280688e",
                            Image = "https://drive.google.com/thumbnail?id=1bOcpnwGFqsWJVLKxwXC4pdQgo5M1wzDi&sz=w1000",
                            IsBestSeller = true,
                            IsFeatured = true,
                            Pages = 450,
                            Publisher = "Little and Sons",
                            Title = "Consectetur quos et.",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Year = 2023
                        },
                        new
                        {
                            Id = 5,
                            Author = "Aliza Bartell",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Amet adipisci asperiores aut ut qui voluptas quo consequatur odio. Laborum consequatur deleniti iure ducimus velit sapiente occaecati. Explicabo eum est numquam consectetur aliquam qui.",
                            GenreId = 4,
                            ISBN = "1f436063-66f5-0110-bd88-c2a056ab703f",
                            Image = "https://drive.google.com/thumbnail?id=1Eu7yiiaAMfb0ktMOKhJZN6htKhF-TPDc&sz=w1000",
                            IsBestSeller = true,
                            IsFeatured = false,
                            Pages = 354,
                            Publisher = "Hackett, Frami and Keeling",
                            Title = "Aut unde numquam.",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Year = 2024
                        },
                        new
                        {
                            Id = 6,
                            Author = "Marian Hauck",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Reiciendis aspernatur ullam. Voluptatem magnam laudantium. Iste ut at voluptas nesciunt. Quos ducimus aperiam blanditiis adipisci exercitationem autem et.",
                            GenreId = 1,
                            ISBN = "0cd4fcb6-3644-6f2c-2c7c-42c3e397ed5b",
                            Image = "https://drive.google.com/thumbnail?id=1Hk2fvOg7hpmRwKWc-QTl82NGerqKib71&sz=w1000",
                            IsBestSeller = false,
                            IsFeatured = true,
                            Pages = 432,
                            Publisher = "Weimann, Kerluke and Bins",
                            Title = "Sint aut sint.",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Year = 2023
                        },
                        new
                        {
                            Id = 7,
                            Author = "Odessa Wyman",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Fugiat aut alias et magnam quis aut qui velit. Delectus repudiandae molestias reiciendis explicabo et inventore quia non eius. Distinctio consectetur aut velit veniam ut eos delectus esse. Repellendus voluptates recusandae eum sed fugiat unde dolores quasi voluptate. Aliquam deleniti explicabo ex recusandae provident a ullam dolor. Architecto rerum debitis deleniti doloribus eos.",
                            GenreId = 3,
                            ISBN = "ffe8f5e1-b868-adeb-fd0c-930b0353bb98",
                            Image = "https://drive.google.com/thumbnail?id=1cozBSsETbbn8YWA27-cyfpxAgOKX-FwJ&sz=w1000",
                            IsBestSeller = false,
                            IsFeatured = false,
                            Pages = 478,
                            Publisher = "Hickle, Heaney and O'Hara",
                            Title = "Ut et molestiae.",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Year = 2023
                        },
                        new
                        {
                            Id = 8,
                            Author = "Emelie Carroll",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Nisi iure vel distinctio facilis sit veritatis exercitationem vero. Eos ad et. Et enim et cum soluta aut et commodi ut ad. Quia perferendis consequatur ad nobis aliquid praesentium amet. Enim tempore iusto sequi recusandae vel. Sed atque saepe deserunt ut ut et id.",
                            GenreId = 1,
                            ISBN = "0acaff54-3902-2d15-f1b5-70607baf321f",
                            Image = "https://drive.google.com/thumbnail?id=1X_DcLIDCuXHtlh2LDJrS07h8lNcK1vXl&sz=w1000",
                            IsBestSeller = true,
                            IsFeatured = false,
                            Pages = 428,
                            Publisher = "McLaughlin - Friesen",
                            Title = "Corrupti totam autem.",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Year = 2024
                        },
                        new
                        {
                            Id = 9,
                            Author = "Brigitte Boyle",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Autem vero numquam deleniti maxime porro natus officiis sit. Est mollitia et veritatis ut velit labore. Repellat sunt doloremque molestiae impedit repudiandae a sit. Consequatur aut ducimus rerum culpa eius excepturi consectetur. Occaecati omnis ut qui ipsa ipsum corporis. Et fuga enim distinctio.",
                            GenreId = 3,
                            ISBN = "a7a44907-8c9b-7025-869e-3a7bb6bd784b",
                            Image = "https://drive.google.com/thumbnail?id=1UMX2PhE5C46EQuRL8UkbdUqIKGuBNbJ5&sz=w1000",
                            IsBestSeller = false,
                            IsFeatured = false,
                            Pages = 393,
                            Publisher = "Feil, Fadel and Okuneva",
                            Title = "Labore odit quos.",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Year = 2024
                        },
                        new
                        {
                            Id = 10,
                            Author = "Jackson Kuphal",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Omnis porro dicta dolores et. Et eveniet sapiente dolor quasi excepturi aut. Error voluptatem consectetur voluptatem aspernatur.",
                            GenreId = 4,
                            ISBN = "ef1679a5-9143-0c8f-778d-365db89475a3",
                            Image = "https://drive.google.com/thumbnail?id=1kSEao7g56ZMPYkBxqCQi70rpfxSqGvMK&sz=w1000",
                            IsBestSeller = false,
                            IsFeatured = false,
                            Pages = 210,
                            Publisher = "Quigley - Conroy",
                            Title = "Consectetur fugiat aut.",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Year = 2024
                        },
                        new
                        {
                            Id = 11,
                            Author = "Leopold Watsica",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Ut sed sapiente est est optio. Et et ex quis ut eveniet praesentium. Eos corporis ipsum qui. Porro soluta quisquam excepturi recusandae ducimus. Et exercitationem harum commodi voluptates. Inventore quaerat voluptatum nostrum mollitia cumque quibusdam debitis id.",
                            GenreId = 2,
                            ISBN = "723bc54c-c751-152d-af94-e92d73056547",
                            Image = "https://drive.google.com/thumbnail?id=1dwug9Rd51uRSIR61N0de32UGuZ1Ns3WH&sz=w1000",
                            IsBestSeller = true,
                            IsFeatured = true,
                            Pages = 216,
                            Publisher = "Schuppe Group",
                            Title = "Molestias repellat quisquam.",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Year = 2023
                        },
                        new
                        {
                            Id = 12,
                            Author = "Noemie Kutch",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Nam magnam possimus sunt sed nam molestiae quis perspiciatis ab. Vitae ipsum similique voluptate. Perspiciatis rerum alias ut.",
                            GenreId = 5,
                            ISBN = "ee77f6cf-4f82-1491-a328-fd1ad8a6057f",
                            Image = "https://drive.google.com/thumbnail?id=1UCje5bgDDxlWMWdYSK8tRgwMp-LkYM27&sz=w1000",
                            IsBestSeller = false,
                            IsFeatured = true,
                            Pages = 105,
                            Publisher = "Friesen, Leuschke and Sipes",
                            Title = "Qui voluptate quod.",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Year = 2024
                        },
                        new
                        {
                            Id = 13,
                            Author = "Linnie Blanda",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Ipsum animi vitae rerum. Quae facilis a quidem adipisci pariatur. Non ut perspiciatis. Dolor dolorem et at dolor unde et at sequi aut. Quod debitis aliquid adipisci ad molestiae enim hic nemo.",
                            GenreId = 2,
                            ISBN = "869d18b6-dc96-ad72-625b-f9eb15a28dbf",
                            Image = "https://drive.google.com/thumbnail?id=17pwzIwvq6pyTJyqQ9ooT7dRXMwIHVNeU&sz=w1000",
                            IsBestSeller = false,
                            IsFeatured = true,
                            Pages = 134,
                            Publisher = "Legros - Altenwerth",
                            Title = "Deleniti soluta labore.",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Year = 2023
                        },
                        new
                        {
                            Id = 14,
                            Author = "Murray Jones",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Nisi iste nihil itaque. Sed a suscipit aliquid quasi. Totam ratione earum.",
                            GenreId = 3,
                            ISBN = "61e63d6c-f8d5-23f7-4e33-708c5943e675",
                            Image = "https://drive.google.com/thumbnail?id=1VGdbU9YQSgzTyesLYdt6xgANcWlOzVlX&sz=w1000",
                            IsBestSeller = true,
                            IsFeatured = true,
                            Pages = 146,
                            Publisher = "Muller, Hessel and Windler",
                            Title = "Rerum ut aut.",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Year = 2024
                        },
                        new
                        {
                            Id = 15,
                            Author = "Shemar Abernathy",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Sint laudantium est ut nihil cupiditate dolor. Quidem consequatur ipsam rerum veniam aut. Sint enim inventore.",
                            GenreId = 5,
                            ISBN = "311c2d8b-4e53-1aa0-7568-43673d5fbace",
                            Image = "https://drive.google.com/thumbnail?id=1-wmBdCw9y0cuT_jaYQVd8zUtQ5Y6WydG&sz=w1000",
                            IsBestSeller = false,
                            IsFeatured = false,
                            Pages = 330,
                            Publisher = "Kohler, Schroeder and Von",
                            Title = "Repellendus molestiae a.",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Year = 2024
                        },
                        new
                        {
                            Id = 16,
                            Author = "Thora Moen",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Et eligendi libero molestiae ipsa. Qui consequatur facilis quae molestiae dicta eius. Velit rem et ut et. Officiis aut modi voluptatem. Maxime autem earum.",
                            GenreId = 5,
                            ISBN = "e5245f8d-a645-1dab-ad1e-a469bd8e3762",
                            Image = "https://drive.google.com/thumbnail?id=17LCGXsaF8chECGxR5IXHkj5qc7UrWIqw&sz=w1000",
                            IsBestSeller = true,
                            IsFeatured = false,
                            Pages = 136,
                            Publisher = "Carroll Inc",
                            Title = "Repellat repellat tempore.",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Year = 2024
                        },
                        new
                        {
                            Id = 17,
                            Author = "Theodora Feeney",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Nesciunt error molestiae tenetur sit laboriosam minus fuga aut. Sequi in voluptatum laborum perspiciatis porro est ea id eum. Magnam quo hic. Rerum omnis similique minima repudiandae ut hic a odit quia. Libero ea sunt dolorum blanditiis.",
                            GenreId = 3,
                            ISBN = "51b74f0d-f977-af3a-66ab-5b67faf7388d",
                            Image = "https://drive.google.com/thumbnail?id=1V5-GfhMxAUE5QhKYGDtE1XlAjl3sRZFN&sz=w1000",
                            IsBestSeller = false,
                            IsFeatured = true,
                            Pages = 103,
                            Publisher = "Purdy and Sons",
                            Title = "Et rerum eum.",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Year = 2024
                        },
                        new
                        {
                            Id = 18,
                            Author = "Alejandra Ebert",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Doloremque nulla eum cum. Sed enim ut. Velit in autem consequatur voluptatem occaecati et eaque. Est unde ipsum odit quas ea laudantium voluptas. Possimus eveniet et. Rem quia in hic nisi ea sit distinctio.",
                            GenreId = 1,
                            ISBN = "4f44564e-6610-2991-0535-3fcc3317d0f4",
                            Image = "https://drive.google.com/thumbnail?id=129hAaWbWcEXubYXVEy2-a4Gbs0ulv9La&sz=w1000",
                            IsBestSeller = true,
                            IsFeatured = false,
                            Pages = 353,
                            Publisher = "Bartell Group",
                            Title = "Tempora qui ut.",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Year = 2024
                        },
                        new
                        {
                            Id = 19,
                            Author = "Helmer Hills",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Praesentium quod occaecati sed. Quis eum et soluta. Occaecati dolorem aut id facere nulla unde consectetur fugit doloremque. Illum reiciendis expedita itaque placeat voluptas beatae id quia. Tempore molestiae veritatis vitae dicta recusandae.",
                            GenreId = 3,
                            ISBN = "af981ad8-05fe-4485-a637-ddb74d94471c",
                            Image = "https://drive.google.com/thumbnail?id=1iS1vCXQNst3Cm0hkq0m9m53HlFXB2e_b&sz=w1000",
                            IsBestSeller = true,
                            IsFeatured = true,
                            Pages = 159,
                            Publisher = "Huels, Roberts and Hahn",
                            Title = "Hic dolores ea.",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Year = 2024
                        },
                        new
                        {
                            Id = 20,
                            Author = "Jerel Blanda",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Rerum eos laboriosam vero. Ipsa sunt modi dolorum. Consectetur ipsam nesciunt. Illo delectus tempore non rem architecto itaque incidunt laudantium voluptatem. Aliquid vero repellat hic dignissimos. Itaque ab aut voluptas.",
                            GenreId = 3,
                            ISBN = "ac4d3bb9-e2f4-be7d-f21f-15aadca0d85e",
                            Image = "https://drive.google.com/thumbnail?id=1EsQ7X9KyU57dg3N3AjHn_xtUtauiElDF&sz=w1000",
                            IsBestSeller = true,
                            IsFeatured = true,
                            Pages = 356,
                            Publisher = "Kris - Haag",
                            Title = "Qui dolor vero.",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Year = 2023
                        });
                });

            modelBuilder.Entity("code_assessment_api.Models.BookTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CheckInTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CheckOutTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("CheckedInById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CheckedOutById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DueTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("CheckedInById");

                    b.HasIndex("CheckedOutById");

                    b.HasIndex("UserId");

                    b.ToTable("BookTransactions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BookId = 18,
                            CheckOutTime = new DateTime(2024, 7, 20, 16, 4, 26, 270, DateTimeKind.Local).AddTicks(7160),
                            CheckedOutById = "5",
                            DueTime = new DateTime(2024, 7, 25, 16, 4, 26, 270, DateTimeKind.Local).AddTicks(7760),
                            UserId = "4"
                        },
                        new
                        {
                            Id = 2,
                            BookId = 17,
                            CheckOutTime = new DateTime(2024, 7, 20, 16, 4, 26, 270, DateTimeKind.Local).AddTicks(7160),
                            CheckedOutById = "5",
                            DueTime = new DateTime(2024, 7, 25, 16, 4, 26, 270, DateTimeKind.Local).AddTicks(8180),
                            UserId = "3"
                        },
                        new
                        {
                            Id = 3,
                            BookId = 8,
                            CheckOutTime = new DateTime(2024, 7, 20, 16, 4, 26, 270, DateTimeKind.Local).AddTicks(7160),
                            CheckedOutById = "5",
                            DueTime = new DateTime(2024, 7, 25, 16, 4, 26, 270, DateTimeKind.Local).AddTicks(8190),
                            UserId = "2"
                        },
                        new
                        {
                            Id = 4,
                            BookId = 14,
                            CheckOutTime = new DateTime(2024, 7, 20, 16, 4, 26, 270, DateTimeKind.Local).AddTicks(7160),
                            CheckedOutById = "5",
                            DueTime = new DateTime(2024, 7, 25, 16, 4, 26, 270, DateTimeKind.Local).AddTicks(8200),
                            UserId = "1"
                        },
                        new
                        {
                            Id = 5,
                            BookId = 13,
                            CheckOutTime = new DateTime(2024, 7, 20, 16, 4, 26, 270, DateTimeKind.Local).AddTicks(7160),
                            CheckedOutById = "5",
                            DueTime = new DateTime(2024, 7, 25, 16, 4, 26, 270, DateTimeKind.Local).AddTicks(8210),
                            UserId = "2"
                        });
                });

            modelBuilder.Entity("code_assessment_api.Models.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "",
                            Name = "Fiction"
                        },
                        new
                        {
                            Id = 2,
                            Description = "",
                            Name = "Non-Fiction"
                        },
                        new
                        {
                            Id = 3,
                            Description = "",
                            Name = "Self-Help"
                        },
                        new
                        {
                            Id = 4,
                            Description = "",
                            Name = "Biography"
                        },
                        new
                        {
                            Id = 5,
                            Description = "",
                            Name = "Cookbook"
                        });
                });

            modelBuilder.Entity("code_assessment_api.Models.ProfileAvatar", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProfileAvatars");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Url = "https://robohash.org/1"
                        },
                        new
                        {
                            Id = 2,
                            Url = "https://robohash.org/2"
                        },
                        new
                        {
                            Id = 3,
                            Url = "https://robohash.org/3"
                        },
                        new
                        {
                            Id = 4,
                            Url = "https://robohash.org/4"
                        },
                        new
                        {
                            Id = 5,
                            Url = "https://robohash.org/5"
                        },
                        new
                        {
                            Id = 6,
                            Url = "https://robohash.org/6"
                        },
                        new
                        {
                            Id = 7,
                            Url = "https://robohash.org/7"
                        },
                        new
                        {
                            Id = 8,
                            Url = "https://robohash.org/8"
                        },
                        new
                        {
                            Id = 9,
                            Url = "https://robohash.org/9"
                        },
                        new
                        {
                            Id = 10,
                            Url = "https://robohash.org/10"
                        },
                        new
                        {
                            Id = 11,
                            Url = "https://robohash.org/11"
                        },
                        new
                        {
                            Id = 12,
                            Url = "https://robohash.org/12"
                        },
                        new
                        {
                            Id = 13,
                            Url = "https://robohash.org/13"
                        },
                        new
                        {
                            Id = 14,
                            Url = "https://robohash.org/14"
                        },
                        new
                        {
                            Id = 15,
                            Url = "https://robohash.org/15"
                        },
                        new
                        {
                            Id = 16,
                            Url = "https://robohash.org/16"
                        },
                        new
                        {
                            Id = 17,
                            Url = "https://robohash.org/17"
                        },
                        new
                        {
                            Id = 18,
                            Url = "https://robohash.org/18"
                        },
                        new
                        {
                            Id = 19,
                            Url = "https://robohash.org/19"
                        },
                        new
                        {
                            Id = 20,
                            Url = "https://robohash.org/20"
                        },
                        new
                        {
                            Id = 21,
                            Url = "https://robohash.org/21"
                        },
                        new
                        {
                            Id = 22,
                            Url = "https://robohash.org/22"
                        },
                        new
                        {
                            Id = 23,
                            Url = "https://robohash.org/23"
                        },
                        new
                        {
                            Id = 24,
                            Url = "https://robohash.org/24"
                        },
                        new
                        {
                            Id = 25,
                            Url = "https://robohash.org/25"
                        },
                        new
                        {
                            Id = 26,
                            Url = "https://robohash.org/26"
                        },
                        new
                        {
                            Id = 27,
                            Url = "https://robohash.org/27"
                        },
                        new
                        {
                            Id = 28,
                            Url = "https://robohash.org/28"
                        },
                        new
                        {
                            Id = 29,
                            Url = "https://robohash.org/29"
                        },
                        new
                        {
                            Id = 30,
                            Url = "https://robohash.org/30"
                        },
                        new
                        {
                            Id = 31,
                            Url = "https://robohash.org/31"
                        },
                        new
                        {
                            Id = 32,
                            Url = "https://robohash.org/32"
                        },
                        new
                        {
                            Id = 33,
                            Url = "https://robohash.org/33"
                        },
                        new
                        {
                            Id = 34,
                            Url = "https://robohash.org/34"
                        },
                        new
                        {
                            Id = 35,
                            Url = "https://robohash.org/35"
                        });
                });

            modelBuilder.Entity("code_assessment_api.Models.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<string>("DateReviewed")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BookId = 11,
                            DateReviewed = "2024-03-31",
                            Description = "Tempore omnis possimus ipsa et est necessitatibus voluptatum at atque. Sint at maiores officia voluptas dolores ab voluptatem voluptas non. Fuga illum omnis quo. In accusamus odio. Vero ex numquam. Voluptatem dolore sequi mollitia optio ea occaecati.",
                            Rating = 1,
                            UserId = "2"
                        },
                        new
                        {
                            Id = 2,
                            BookId = 6,
                            DateReviewed = "2024-04-10",
                            Description = "Non ratione minus accusantium enim quisquam rerum rem explicabo. Eaque suscipit molestias dolores facere ducimus sapiente et. Aliquam expedita adipisci est repellendus necessitatibus error ullam eos. Recusandae voluptatem quos esse eum aut sit id enim. Molestiae maxime non delectus natus cumque iste.",
                            Rating = 1,
                            UserId = "2"
                        },
                        new
                        {
                            Id = 3,
                            BookId = 19,
                            DateReviewed = "2024-04-06",
                            Description = "Dolores similique quia. Vel ipsam rem dolores omnis. Numquam et aperiam. Quo voluptates omnis magnam. Voluptatibus nobis nisi delectus. Illum aliquam nam quos.",
                            Rating = 2,
                            UserId = "4"
                        },
                        new
                        {
                            Id = 4,
                            BookId = 12,
                            DateReviewed = "2023-10-17",
                            Description = "Error qui quia animi et dolores similique iste et. Dolorum porro aspernatur numquam tenetur nostrum. Esse sit maiores quo rerum sed minus qui labore. Incidunt voluptatem odit eveniet dolore ut sit. Vero dolor reprehenderit ea voluptas molestiae est. Expedita quia quidem voluptatem odit et quia magnam.",
                            Rating = 5,
                            UserId = "4"
                        },
                        new
                        {
                            Id = 5,
                            BookId = 17,
                            DateReviewed = "2023-10-22",
                            Description = "Aut repudiandae voluptas quo eum enim asperiores aut. Sit veritatis aliquam et. Qui ipsum minus sint quia iste dolorem.",
                            Rating = 5,
                            UserId = "4"
                        },
                        new
                        {
                            Id = 6,
                            BookId = 8,
                            DateReviewed = "2023-11-20",
                            Description = "Laboriosam soluta blanditiis voluptate et quis et eos. Dolorem repellat eos quisquam ut. Qui aut magni qui error cumque sed. Laborum excepturi atque. Et natus ipsum qui aut nihil quasi atque ut.",
                            Rating = 4,
                            UserId = "2"
                        },
                        new
                        {
                            Id = 7,
                            BookId = 6,
                            DateReviewed = "2023-10-22",
                            Description = "Et sed et ratione labore consequatur odit modi explicabo laudantium. Molestiae non qui dolores reprehenderit est. Error tempore voluptas iusto officiis. Amet quia similique qui et occaecati nesciunt culpa.",
                            Rating = 3,
                            UserId = "2"
                        },
                        new
                        {
                            Id = 8,
                            BookId = 16,
                            DateReviewed = "2023-09-25",
                            Description = "Facilis quaerat mollitia non numquam fugit. Repellat quidem sed eos voluptas esse nesciunt soluta harum officia. Perspiciatis rerum fugit. Nobis id officiis vitae nesciunt itaque quam ex. Perferendis non eum nulla sit tempora dolores. Et voluptatem quaerat omnis.",
                            Rating = 3,
                            UserId = "1"
                        },
                        new
                        {
                            Id = 9,
                            BookId = 17,
                            DateReviewed = "2024-03-06",
                            Description = "Corrupti odio quos praesentium. Est aliquam sed distinctio animi. Fuga est explicabo. Aut aliquam illo ut vel sapiente et voluptates. Voluptate tempora est sapiente ea mollitia voluptas at.",
                            Rating = 1,
                            UserId = "3"
                        },
                        new
                        {
                            Id = 10,
                            BookId = 16,
                            DateReviewed = "2024-03-22",
                            Description = "Magnam ut ad. Dolores ipsam delectus. Soluta velit quidem nostrum. Ut qui quis deleniti reiciendis.",
                            Rating = 1,
                            UserId = "1"
                        },
                        new
                        {
                            Id = 11,
                            BookId = 6,
                            DateReviewed = "2024-04-20",
                            Description = "Excepturi omnis velit exercitationem ut asperiores. Quas et dolores dolorem et delectus. Illo magni dolor et enim. Sit est aliquam. Itaque amet quia voluptas dolore consequatur. Illo quae pariatur velit voluptatum.",
                            Rating = 2,
                            UserId = "1"
                        },
                        new
                        {
                            Id = 12,
                            BookId = 9,
                            DateReviewed = "2023-08-03",
                            Description = "Dolore alias distinctio dolores ut quas atque. Dolore qui possimus omnis explicabo qui sint nulla vitae. Aspernatur repudiandae vitae velit eum ut voluptatem est nostrum.",
                            Rating = 3,
                            UserId = "2"
                        },
                        new
                        {
                            Id = 13,
                            BookId = 11,
                            DateReviewed = "2024-07-17",
                            Description = "Ipsam dignissimos quis. Consequatur ipsum aut voluptatem voluptatem. Ad nam culpa et iusto modi animi sed. Quo eveniet modi exercitationem dolores et error. Quasi quisquam nobis molestiae est ea. Nobis qui sed suscipit eum.",
                            Rating = 3,
                            UserId = "2"
                        },
                        new
                        {
                            Id = 14,
                            BookId = 17,
                            DateReviewed = "2023-12-04",
                            Description = "Vel inventore nihil. Ipsam quia sit eius cumque libero sit. Deserunt quo ut et.",
                            Rating = 2,
                            UserId = "1"
                        },
                        new
                        {
                            Id = 15,
                            BookId = 5,
                            DateReviewed = "2024-03-30",
                            Description = "Quisquam eaque iure cupiditate distinctio beatae quia sit adipisci. Quia dolorem est quo veritatis unde libero distinctio unde sint. Qui architecto et facilis quasi tempore provident. Omnis temporibus qui. Eos illo quis optio dolores odio amet.",
                            Rating = 1,
                            UserId = "1"
                        },
                        new
                        {
                            Id = 16,
                            BookId = 4,
                            DateReviewed = "2023-10-23",
                            Description = "Quia hic in id accusamus ut et exercitationem assumenda. Recusandae modi et autem consectetur corporis et. Necessitatibus autem at vel aut et aliquid numquam. Autem error consequatur labore.",
                            Rating = 3,
                            UserId = "4"
                        },
                        new
                        {
                            Id = 17,
                            BookId = 5,
                            DateReviewed = "2023-12-13",
                            Description = "Sed accusantium doloremque reprehenderit et. Nam facere autem velit dolorem doloribus neque. Libero excepturi odit nam ipsam necessitatibus eum consectetur. Rerum non voluptatum porro aut. Maiores commodi repellat nulla quas. Velit eum sunt repellat nobis quibusdam quo tempora quia aut.",
                            Rating = 1,
                            UserId = "4"
                        },
                        new
                        {
                            Id = 18,
                            BookId = 2,
                            DateReviewed = "2024-05-27",
                            Description = "Ut amet cumque. Qui eius enim rerum aut. Quia ut nulla id. Tempore quas maxime. Tempore sit et assumenda earum perferendis qui aut. Similique sunt error tenetur quis consectetur.",
                            Rating = 4,
                            UserId = "2"
                        },
                        new
                        {
                            Id = 19,
                            BookId = 9,
                            DateReviewed = "2024-05-16",
                            Description = "Consequuntur voluptatum quae. Quae et illum. Reprehenderit enim sequi ipsum unde quibusdam velit ipsam. Tempore dolores eos in eaque cum.",
                            Rating = 3,
                            UserId = "4"
                        },
                        new
                        {
                            Id = 20,
                            BookId = 12,
                            DateReviewed = "2024-01-09",
                            Description = "Quia eius architecto. Praesentium minus aliquam esse quidem eum magnam et. Porro sint amet corporis molestiae temporibus. Sapiente accusamus pariatur quisquam asperiores deleniti dolorem qui sit ad. Enim voluptate quia rerum.",
                            Rating = 5,
                            UserId = "2"
                        });
                });

            modelBuilder.Entity("code_assessment_api.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("First")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Last")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int?>("ProfileAvatarId")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("ProfileAvatarId");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b44134aa-5677-4d39-997f-b0eb55020cdf",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Darnell35@hotmail.com",
                            EmailConfirmed = false,
                            First = "Darnell",
                            Last = "Gutkowski",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            ProfileAvatarId = 13,
                            SecurityStamp = "cf4fefc2-39ef-459a-87ff-a177635ee78e",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "Darnell_Gutkowski"
                        },
                        new
                        {
                            Id = "2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "eed8beb2-3a3b-47eb-a864-e0400e5d4ed8",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Jan75@yahoo.com",
                            EmailConfirmed = false,
                            First = "Jan",
                            Last = "Dach",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            ProfileAvatarId = 3,
                            SecurityStamp = "878171b2-ba7b-4205-bf5c-ed54c106b6e9",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "Jan81"
                        },
                        new
                        {
                            Id = "3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "597c8de0-a6dd-44f1-a07b-02a460f41bcf",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Marta_Rolfson14@gmail.com",
                            EmailConfirmed = false,
                            First = "Marta",
                            Last = "Rolfson",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            ProfileAvatarId = 15,
                            SecurityStamp = "cf43e31f-cf02-43d2-a32b-af9252347cbc",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "Marta55"
                        },
                        new
                        {
                            Id = "4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fd1f91b0-6040-40a2-a3b6-d675fc1e7ddf",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Louise.Leffler51@yahoo.com",
                            EmailConfirmed = false,
                            First = "Louise",
                            Last = "Leffler",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            ProfileAvatarId = 27,
                            SecurityStamp = "dbe8986e-74a4-45dd-a2e2-ae539e7dec3a",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "Louise53"
                        },
                        new
                        {
                            Id = "5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3fc285f2-c964-44fc-bdd7-f23a6186c19e",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Forrest58@gmail.com",
                            EmailConfirmed = false,
                            First = "Forrest",
                            Last = "Gusikowski",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            ProfileAvatarId = 7,
                            SecurityStamp = "a64c53f4-2fdb-4d58-b387-a4906bbb647c",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "Forrest.Gusikowski81"
                        });
                });

            modelBuilder.Entity("code_assessment_api.Models.UserFavoritesBook", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId");

                    b.ToTable("UserFavoritesbooks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BookId = 1,
                            UserId = "1"
                        },
                        new
                        {
                            Id = 2,
                            BookId = 2,
                            UserId = "1"
                        },
                        new
                        {
                            Id = 3,
                            BookId = 3,
                            UserId = "1"
                        },
                        new
                        {
                            Id = 4,
                            BookId = 4,
                            UserId = "1"
                        },
                        new
                        {
                            Id = 5,
                            BookId = 5,
                            UserId = "1"
                        },
                        new
                        {
                            Id = 6,
                            BookId = 4,
                            UserId = "2"
                        },
                        new
                        {
                            Id = 7,
                            BookId = 5,
                            UserId = "2"
                        },
                        new
                        {
                            Id = 8,
                            BookId = 6,
                            UserId = "2"
                        },
                        new
                        {
                            Id = 9,
                            BookId = 7,
                            UserId = "2"
                        },
                        new
                        {
                            Id = 10,
                            BookId = 8,
                            UserId = "2"
                        },
                        new
                        {
                            Id = 11,
                            BookId = 9,
                            UserId = "2"
                        },
                        new
                        {
                            Id = 12,
                            BookId = 1,
                            UserId = "3"
                        },
                        new
                        {
                            Id = 13,
                            BookId = 2,
                            UserId = "3"
                        },
                        new
                        {
                            Id = 14,
                            BookId = 3,
                            UserId = "3"
                        },
                        new
                        {
                            Id = 15,
                            BookId = 4,
                            UserId = "3"
                        },
                        new
                        {
                            Id = 16,
                            BookId = 5,
                            UserId = "3"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("code_assessment_api.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("code_assessment_api.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("code_assessment_api.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("code_assessment_api.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("code_assessment_api.Models.Book", b =>
                {
                    b.HasOne("code_assessment_api.Models.Genre", "Genre")
                        .WithMany("Books")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("code_assessment_api.Models.BookTransaction", b =>
                {
                    b.HasOne("code_assessment_api.Models.Book", "Book")
                        .WithMany("Transactions")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("code_assessment_api.Models.User", "CheckedInBy")
                        .WithMany()
                        .HasForeignKey("CheckedInById");

                    b.HasOne("code_assessment_api.Models.User", "CheckedOutBy")
                        .WithMany()
                        .HasForeignKey("CheckedOutById");

                    b.HasOne("code_assessment_api.Models.User", "User")
                        .WithMany("Transactions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("CheckedInBy");

                    b.Navigation("CheckedOutBy");

                    b.Navigation("User");
                });

            modelBuilder.Entity("code_assessment_api.Models.Review", b =>
                {
                    b.HasOne("code_assessment_api.Models.Book", "Book")
                        .WithMany("Reviews")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("code_assessment_api.Models.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("code_assessment_api.Models.User", b =>
                {
                    b.HasOne("code_assessment_api.Models.ProfileAvatar", "ProfileAvatar")
                        .WithMany("Users")
                        .HasForeignKey("ProfileAvatarId");

                    b.Navigation("ProfileAvatar");
                });

            modelBuilder.Entity("code_assessment_api.Models.UserFavoritesBook", b =>
                {
                    b.HasOne("code_assessment_api.Models.Book", "Book")
                        .WithMany("Favorites")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("code_assessment_api.Models.User", "User")
                        .WithMany("Favorites")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("code_assessment_api.Models.Book", b =>
                {
                    b.Navigation("Favorites");

                    b.Navigation("Reviews");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("code_assessment_api.Models.Genre", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("code_assessment_api.Models.ProfileAvatar", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("code_assessment_api.Models.User", b =>
                {
                    b.Navigation("Favorites");

                    b.Navigation("Reviews");

                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
