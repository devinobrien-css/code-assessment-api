// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using code_assessment_api.Data;

#nullable disable

namespace code_assessment_api.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240718005511_AdjustRelationship")]
    partial class AdjustRelationship
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("code_assessment_api.Models.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.Property<string>("ISBN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsBestSeller")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFeatured")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNewArrival")
                        .HasColumnType("bit");

                    b.Property<int>("Pages")
                        .HasColumnType("int");

                    b.Property<string>("Publisher")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GenreId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Author = "Chanel Gottlieb",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Esse esse rerum et exercitationem et itaque. Iusto quia dignissimos nihil ipsum sequi eum quae et voluptate. Eum vitae ex et perspiciatis ea est vero.",
                            GenreId = 1,
                            ISBN = "b14c883d-f5f2-3bde-3fd0-533f96a98b3d",
                            Image = "https://picsum.photos/640/480/?image=749",
                            IsBestSeller = false,
                            IsDeleted = false,
                            IsFeatured = false,
                            IsNewArrival = false,
                            Pages = 164,
                            Publisher = "Doyle, Turner and Klein",
                            Title = "Sed illo architecto sunt non.",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Year = 2023
                        },
                        new
                        {
                            Id = 2,
                            Author = "Litzy Fritsch",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Libero et voluptatum delectus deserunt nihil exercitationem. Dolor non tempore eaque dignissimos explicabo qui. Perspiciatis veritatis provident cumque. Iusto assumenda saepe beatae numquam excepturi non amet. Similique vero excepturi facilis sapiente cumque omnis. Dolorem itaque omnis aut quia magni labore maiores laudantium est.",
                            GenreId = 2,
                            ISBN = "ca6e35a4-a71c-95c3-af15-c40dcc8d31b6",
                            Image = "https://picsum.photos/640/480/?image=552",
                            IsBestSeller = false,
                            IsDeleted = false,
                            IsFeatured = false,
                            IsNewArrival = false,
                            Pages = 450,
                            Publisher = "Murazik, Mosciski and Bruen",
                            Title = "Voluptatibus porro vitae qui voluptas voluptatem.",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Year = 2024
                        },
                        new
                        {
                            Id = 3,
                            Author = "Noemie Reilly",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Accusantium ullam qui qui ut id nemo incidunt. Quia eos rerum officiis. Ratione minus voluptatibus. Est iure quis id deserunt delectus at eos odit eos. Eius possimus laborum ut sequi perferendis qui molestias sed. Sit et quis.",
                            GenreId = 3,
                            ISBN = "c58847ed-20c9-0844-17c3-9a75ee27f065",
                            Image = "https://picsum.photos/640/480/?image=337",
                            IsBestSeller = false,
                            IsDeleted = false,
                            IsFeatured = false,
                            IsNewArrival = false,
                            Pages = 498,
                            Publisher = "Hartmann, Upton and Kris",
                            Title = "Et quia deleniti quam veritatis occaecati cupiditate.",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Year = 2024
                        },
                        new
                        {
                            Id = 4,
                            Author = "Craig Hahn",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Ullam ea sint animi necessitatibus illo quia voluptas fugit quam. Aspernatur ullam consectetur voluptates qui. Aspernatur maiores et rem.",
                            GenreId = 5,
                            ISBN = "12441b1f-d1c5-24e2-804f-351bb7509626",
                            Image = "https://picsum.photos/640/480/?image=606",
                            IsBestSeller = false,
                            IsDeleted = false,
                            IsFeatured = false,
                            IsNewArrival = false,
                            Pages = 433,
                            Publisher = "Rippin - Goodwin",
                            Title = "Qui ut neque.",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Year = 2024
                        },
                        new
                        {
                            Id = 5,
                            Author = "Jedediah Gutmann",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Velit aut dolor inventore tempora quisquam tenetur. Voluptas perferendis odit beatae soluta qui qui est soluta. Est et magnam sint dolorem eius eos. Et et cum quia esse sunt dolorum aut. Fuga vitae non sit repudiandae nihil saepe enim totam quod.",
                            GenreId = 3,
                            ISBN = "23edaff6-a571-3e8e-e957-05ffcbd0bfef",
                            Image = "https://picsum.photos/640/480/?image=834",
                            IsBestSeller = false,
                            IsDeleted = false,
                            IsFeatured = false,
                            IsNewArrival = false,
                            Pages = 322,
                            Publisher = "Koss - Farrell",
                            Title = "Possimus voluptatem quaerat porro id.",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Year = 2024
                        },
                        new
                        {
                            Id = 6,
                            Author = "Brandt Vandervort",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Sit et et et consequuntur amet voluptas quis. Corporis quas voluptatum iure consequatur. Tempora aut tempore autem dolorem voluptas mollitia dignissimos est. Magni velit tenetur beatae quaerat fuga alias vel quo temporibus. Earum voluptas quam ea ipsa eos nostrum esse velit est.",
                            GenreId = 5,
                            ISBN = "c1b1eee3-ae0a-51a8-db79-c728712260c3",
                            Image = "https://picsum.photos/640/480/?image=747",
                            IsBestSeller = false,
                            IsDeleted = false,
                            IsFeatured = false,
                            IsNewArrival = false,
                            Pages = 394,
                            Publisher = "Torp Group",
                            Title = "Labore natus qui laborum voluptatibus sint dolores dolorem ex deserunt.",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Year = 2023
                        },
                        new
                        {
                            Id = 7,
                            Author = "Vivien Harber",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Et aperiam odio vel quae excepturi dolorum et fugiat autem. Possimus cumque ab hic. Velit ducimus qui harum provident ipsa. Atque ex culpa illo neque iusto cupiditate veritatis. Perspiciatis non tempora rerum perspiciatis ut dolor. Nesciunt quia enim exercitationem reprehenderit et.",
                            GenreId = 2,
                            ISBN = "4a5adb0f-1f3a-825e-30c8-63115a5c037e",
                            Image = "https://picsum.photos/640/480/?image=1",
                            IsBestSeller = false,
                            IsDeleted = false,
                            IsFeatured = false,
                            IsNewArrival = false,
                            Pages = 211,
                            Publisher = "Kihn, Swaniawski and Grimes",
                            Title = "Optio voluptates incidunt quia soluta esse aut.",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Year = 2024
                        },
                        new
                        {
                            Id = 8,
                            Author = "Gregoria Herman",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Est voluptas dolor repudiandae. Voluptatem sint accusamus culpa ex unde. Et aut et reiciendis. Quas dolor velit aliquid omnis facere qui. Voluptatem eum dolorem. Suscipit repellendus voluptate non consequuntur voluptatem odit.",
                            GenreId = 1,
                            ISBN = "2eaa91f2-4ebe-433c-89b8-4f936ff95a78",
                            Image = "https://picsum.photos/640/480/?image=945",
                            IsBestSeller = false,
                            IsDeleted = false,
                            IsFeatured = false,
                            IsNewArrival = false,
                            Pages = 210,
                            Publisher = "Mosciski Inc",
                            Title = "Corrupti qui eaque cupiditate.",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Year = 2024
                        },
                        new
                        {
                            Id = 9,
                            Author = "Ansel Pagac",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Numquam in animi nemo rerum dolorem ut aut quos. Est in totam exercitationem officia quia at ipsum voluptatem. Ut beatae est. Laudantium minus tempore modi laborum omnis. Quo quos error maiores. Enim vel maxime aut enim et et tempore.",
                            GenreId = 2,
                            ISBN = "1ce0e12e-f91a-783a-435c-42d688b38cc4",
                            Image = "https://picsum.photos/640/480/?image=591",
                            IsBestSeller = false,
                            IsDeleted = false,
                            IsFeatured = false,
                            IsNewArrival = false,
                            Pages = 278,
                            Publisher = "McLaughlin - Dickinson",
                            Title = "Sequi adipisci doloribus placeat voluptates natus cupiditate quisquam iusto necessitatibus.",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Year = 2024
                        },
                        new
                        {
                            Id = 10,
                            Author = "Patrick Howe",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Velit impedit aut ratione ut neque cumque. Ipsa illo eius numquam tempora. Eum reiciendis molestiae et. Fuga iure et aperiam commodi soluta. Ratione enim consequatur est. Incidunt necessitatibus molestiae ut eos omnis pariatur vel.",
                            GenreId = 3,
                            ISBN = "25f6f42f-4cc4-347e-eff2-a93e7121c887",
                            Image = "https://picsum.photos/640/480/?image=772",
                            IsBestSeller = false,
                            IsDeleted = false,
                            IsFeatured = false,
                            IsNewArrival = false,
                            Pages = 370,
                            Publisher = "Mraz - Kiehn",
                            Title = "Voluptatem voluptas maiores.",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Year = 2024
                        });
                });

            modelBuilder.Entity("code_assessment_api.Models.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Genre");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "",
                            Name = "Fiction"
                        },
                        new
                        {
                            Id = 2,
                            Description = "",
                            Name = "Non-Fiction"
                        },
                        new
                        {
                            Id = 3,
                            Description = "",
                            Name = "Self-Help"
                        },
                        new
                        {
                            Id = 4,
                            Description = "",
                            Name = "Biography"
                        },
                        new
                        {
                            Id = 5,
                            Description = "",
                            Name = "Cookbook"
                        });
                });

            modelBuilder.Entity("code_assessment_api.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("First")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Last")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfilePicture")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("code_assessment_api.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("code_assessment_api.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("code_assessment_api.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("code_assessment_api.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("code_assessment_api.Models.Book", b =>
                {
                    b.HasOne("code_assessment_api.Models.Genre", "Genre")
                        .WithMany("Books")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("code_assessment_api.Models.Genre", b =>
                {
                    b.Navigation("Books");
                });
#pragma warning restore 612, 618
        }
    }
}
