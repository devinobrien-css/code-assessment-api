// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using code_assessment_api.Data;

#nullable disable

namespace code_assessment_api.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240718130222_UpdateBookImages")]
    partial class UpdateBookImages
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("code_assessment_api.Models.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.Property<string>("ISBN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsBestSeller")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFeatured")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNewArrival")
                        .HasColumnType("bit");

                    b.Property<int>("Pages")
                        .HasColumnType("int");

                    b.Property<string>("Publisher")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GenreId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Author = "Mozelle Kessler",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Nostrum tempore est tempora occaecati eligendi. Architecto qui asperiores ullam et. Est amet sit eius aut commodi officiis. Vel expedita quasi enim corporis totam aspernatur rerum.",
                            GenreId = 5,
                            ISBN = "2cb59d59-df68-fa41-b602-d3223860191f",
                            Image = "1zycl7EiCECK541ialA9UCrs9HdfddUQb",
                            IsBestSeller = false,
                            IsDeleted = false,
                            IsFeatured = false,
                            IsNewArrival = false,
                            Pages = 312,
                            Publisher = "Waters, Wolff and Braun",
                            Title = "Omnis eaque dolor fugit deserunt modi.",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Year = 2023
                        },
                        new
                        {
                            Id = 2,
                            Author = "Sadie Stoltenberg",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Ex eum aut suscipit et animi provident non. Dicta cupiditate amet accusamus. Illum ex earum. Quibusdam adipisci ducimus voluptates ducimus vel reiciendis. Numquam ea ullam voluptates laudantium odit.",
                            GenreId = 1,
                            ISBN = "1ec378b5-ec78-e712-6674-c16dbd746e70",
                            Image = "1C4sRKzQrFUDNQ1X12WVeKbX0knOoC6tA",
                            IsBestSeller = false,
                            IsDeleted = false,
                            IsFeatured = false,
                            IsNewArrival = false,
                            Pages = 244,
                            Publisher = "Gusikowski - Hoppe",
                            Title = "Consequatur quod qui dolorem illo temporibus et.",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Year = 2023
                        },
                        new
                        {
                            Id = 3,
                            Author = "Angie Moen",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Quos non eveniet quae incidunt. Dolor et quam. Quasi fuga et. Aut optio ex sunt reprehenderit magni veniam et.",
                            GenreId = 5,
                            ISBN = "5757bb79-31d7-f4e7-2c70-158776c0254b",
                            Image = "12xFmb08WRoRr5omVtZ38Obo1imbutVlh",
                            IsBestSeller = false,
                            IsDeleted = false,
                            IsFeatured = false,
                            IsNewArrival = false,
                            Pages = 165,
                            Publisher = "Wiegand, Funk and Upton",
                            Title = "Dolor amet iure laborum eligendi veritatis iste iusto.",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Year = 2024
                        },
                        new
                        {
                            Id = 4,
                            Author = "Beatrice Stark",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Similique minus doloribus inventore perferendis. At qui est. Veritatis nostrum quia sint voluptas voluptas. Non quam earum doloremque provident et. Explicabo aut in blanditiis ut dolorem. Vel eum iusto rerum pariatur fugiat placeat ex.",
                            GenreId = 3,
                            ISBN = "ce6f7a4b-5060-ecf6-1a5c-61871cde2bc6",
                            Image = "1bOcpnwGFqsWJVLKxwXC4pdQgo5M1wzDi",
                            IsBestSeller = false,
                            IsDeleted = false,
                            IsFeatured = false,
                            IsNewArrival = false,
                            Pages = 332,
                            Publisher = "Hamill, McClure and McKenzie",
                            Title = "Modi illo accusamus.",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Year = 2024
                        },
                        new
                        {
                            Id = 5,
                            Author = "Minerva Lind",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Totam fugit totam labore. Repellendus natus sit sed iste. Error ut totam dolorem. Magni velit praesentium consequatur. In qui veritatis ab nesciunt sed. Et suscipit harum et porro enim iusto soluta.",
                            GenreId = 2,
                            ISBN = "d146a097-6abf-9e01-d8bf-321a2f37f3be",
                            Image = "1Eu7yiiaAMfb0ktMOKhJZN6htKhF-TPDc",
                            IsBestSeller = false,
                            IsDeleted = false,
                            IsFeatured = false,
                            IsNewArrival = false,
                            Pages = 203,
                            Publisher = "Mohr Group",
                            Title = "Expedita inventore repudiandae aliquid.",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Year = 2023
                        },
                        new
                        {
                            Id = 6,
                            Author = "Manley Haley",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Corporis consequuntur rerum voluptatem. Ullam magnam ut reprehenderit qui id iste minima ut quod. Aut et delectus est molestiae ea aut. Aut aut aut eos assumenda ad nemo molestiae ut quisquam. Eos recusandae reiciendis debitis perspiciatis omnis autem. Consequatur quo a asperiores.",
                            GenreId = 1,
                            ISBN = "b363a9a9-6294-5e9f-4c33-6f980c328a2a",
                            Image = "1Hk2fvOg7hpmRwKWc-QTl82NGerqKib71",
                            IsBestSeller = false,
                            IsDeleted = false,
                            IsFeatured = false,
                            IsNewArrival = false,
                            Pages = 156,
                            Publisher = "Deckow - Altenwerth",
                            Title = "Sed et sequi.",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Year = 2024
                        },
                        new
                        {
                            Id = 7,
                            Author = "Jerry Kshlerin",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Numquam voluptate alias. Corrupti in voluptas perspiciatis eius totam. Provident quia debitis sequi ut nulla aut ipsam debitis et. In ad veniam rerum cupiditate quibusdam numquam praesentium.",
                            GenreId = 4,
                            ISBN = "777a2196-9374-4b98-b9fb-d3045c30806a",
                            Image = "1cozBSsETbbn8YWA27-cyfpxAgOKX-FwJ",
                            IsBestSeller = false,
                            IsDeleted = false,
                            IsFeatured = false,
                            IsNewArrival = false,
                            Pages = 256,
                            Publisher = "Conn - Towne",
                            Title = "Dolor et sed pariatur accusamus nihil quia.",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Year = 2023
                        },
                        new
                        {
                            Id = 8,
                            Author = "Henderson Bogisich",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Id voluptatem asperiores natus aut non nemo aliquam. Dolores temporibus hic et veritatis voluptatem. Assumenda neque sed nostrum porro earum nesciunt debitis excepturi animi. Et voluptatibus qui atque perspiciatis est sit fugit. Quis quos libero ad eligendi.",
                            GenreId = 2,
                            ISBN = "90a222fe-407f-3a3c-3ae3-2c11fbf076f2",
                            Image = "1X_DcLIDCuXHtlh2LDJrS07h8lNcK1vXl",
                            IsBestSeller = false,
                            IsDeleted = false,
                            IsFeatured = false,
                            IsNewArrival = false,
                            Pages = 497,
                            Publisher = "O'Keefe - Koelpin",
                            Title = "Consequatur quam et perferendis.",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Year = 2023
                        },
                        new
                        {
                            Id = 9,
                            Author = "Mylene Gerhold",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Pariatur odio earum illo vero. Est sit sed consequatur ut velit modi rerum. Fugit ipsum numquam placeat. Laborum voluptatibus aut ut sunt aut ad voluptatibus nihil. Ab praesentium animi vel sed id dolor sint. Eos totam veniam aut consequatur voluptatem sunt est cupiditate velit.",
                            GenreId = 3,
                            ISBN = "d731adac-e749-2479-37b9-f18523a83bc1",
                            Image = "1UMX2PhE5C46EQuRL8UkbdUqIKGuBNbJ5",
                            IsBestSeller = false,
                            IsDeleted = false,
                            IsFeatured = false,
                            IsNewArrival = false,
                            Pages = 201,
                            Publisher = "Wunsch, Larson and Senger",
                            Title = "Voluptatem et qui libero aliquam.",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Year = 2023
                        },
                        new
                        {
                            Id = 10,
                            Author = "Fausto Koch",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Tempora accusamus ullam nemo non ut. Nulla exercitationem quos aut. Consequatur hic qui rerum autem distinctio unde illo aperiam. Facilis qui sunt. Molestias nihil voluptatem veritatis quidem fuga quaerat. Rerum nulla neque voluptatum rerum sunt at blanditiis.",
                            GenreId = 4,
                            ISBN = "458695fb-b1e1-6e20-40fb-26e23fca2b49",
                            Image = "1kSEao7g56ZMPYkBxqCQi70rpfxSqGvMK",
                            IsBestSeller = false,
                            IsDeleted = false,
                            IsFeatured = false,
                            IsNewArrival = false,
                            Pages = 403,
                            Publisher = "Dooley, Osinski and Fadel",
                            Title = "Eveniet ad doloremque et in adipisci laudantium.",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Year = 2023
                        });
                });

            modelBuilder.Entity("code_assessment_api.Models.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Genre");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "",
                            Name = "Fiction"
                        },
                        new
                        {
                            Id = 2,
                            Description = "",
                            Name = "Non-Fiction"
                        },
                        new
                        {
                            Id = 3,
                            Description = "",
                            Name = "Self-Help"
                        },
                        new
                        {
                            Id = 4,
                            Description = "",
                            Name = "Biography"
                        },
                        new
                        {
                            Id = 5,
                            Description = "",
                            Name = "Cookbook"
                        });
                });

            modelBuilder.Entity("code_assessment_api.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("First")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Last")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfilePicture")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("code_assessment_api.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("code_assessment_api.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("code_assessment_api.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("code_assessment_api.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("code_assessment_api.Models.Book", b =>
                {
                    b.HasOne("code_assessment_api.Models.Genre", "Genre")
                        .WithMany("Books")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("code_assessment_api.Models.Genre", b =>
                {
                    b.Navigation("Books");
                });
#pragma warning restore 612, 618
        }
    }
}
