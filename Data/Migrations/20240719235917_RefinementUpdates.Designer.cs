// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using code_assessment_api.Data;

#nullable disable

namespace code_assessment_api.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240719235917_RefinementUpdates")]
    partial class RefinementUpdates
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("code_assessment_api.Models.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.Property<string>("ISBN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsBestSeller")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFeatured")
                        .HasColumnType("bit");

                    b.Property<int>("Pages")
                        .HasColumnType("int");

                    b.Property<string>("Publisher")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GenreId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Author = "Mable Ankunding",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Occaecati dolorum ut odit atque autem veniam sit. Perferendis id deleniti ut quo sint molestiae voluptatem provident et. Ut nam voluptate illum consequatur sit enim rerum. Officiis quasi nam sit dolorem nesciunt.",
                            GenreId = 5,
                            ISBN = "7652e78c-6c5c-2885-0aa9-4be5b301a589",
                            Image = "https://drive.google.com/thumbnail?id=1zycl7EiCECK541ialA9UCrs9HdfddUQb&sz=w1000",
                            IsBestSeller = true,
                            IsFeatured = false,
                            Pages = 203,
                            Publisher = "Purdy, Ortiz and Cormier",
                            Title = "Praesentium nesciunt nobis.",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Year = 2023
                        },
                        new
                        {
                            Id = 2,
                            Author = "Jannie Konopelski",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Hic ut perferendis amet eos amet illo et. Autem laboriosam occaecati omnis unde aut qui pariatur et. Dignissimos suscipit dolores voluptatem quod. Vero quo et et harum libero.",
                            GenreId = 1,
                            ISBN = "3a8db684-e01c-65a5-cc60-3e03a2b8466f",
                            Image = "https://drive.google.com/thumbnail?id=1C4sRKzQrFUDNQ1X12WVeKbX0knOoC6tA&sz=w1000",
                            IsBestSeller = false,
                            IsFeatured = true,
                            Pages = 426,
                            Publisher = "Ryan, Corwin and Armstrong",
                            Title = "Placeat expedita tenetur.",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Year = 2023
                        },
                        new
                        {
                            Id = 3,
                            Author = "Mariela Morar",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Voluptas enim esse ducimus dignissimos. Accusantium magnam ea incidunt facilis nobis quam. Ea sed earum commodi nostrum quibusdam at saepe.",
                            GenreId = 3,
                            ISBN = "7412d806-3c8f-b5ce-3271-fdc337254356",
                            Image = "https://drive.google.com/thumbnail?id=12xFmb08WRoRr5omVtZ38Obo1imbutVlh&sz=w1000",
                            IsBestSeller = true,
                            IsFeatured = true,
                            Pages = 275,
                            Publisher = "Kozey, Raynor and O'Hara",
                            Title = "Blanditiis praesentium atque.",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Year = 2024
                        },
                        new
                        {
                            Id = 4,
                            Author = "Malinda D'Amore",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Vitae voluptate illum voluptatem. Aut aut et. Ab doloremque enim. Eum id dolor odio nobis.",
                            GenreId = 1,
                            ISBN = "3110af0d-ce6b-b125-ac04-4debc8bd80f5",
                            Image = "https://drive.google.com/thumbnail?id=1bOcpnwGFqsWJVLKxwXC4pdQgo5M1wzDi&sz=w1000",
                            IsBestSeller = false,
                            IsFeatured = true,
                            Pages = 331,
                            Publisher = "Paucek, Bednar and Koch",
                            Title = "Mollitia delectus nihil.",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Year = 2024
                        },
                        new
                        {
                            Id = 5,
                            Author = "Bonnie Thompson",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Inventore et quod laudantium deleniti quaerat quia. Eligendi sunt iure qui libero officiis nobis animi est at. Quam maxime et porro error libero quibusdam voluptas in. Cumque officiis et quia et provident recusandae. Magni qui culpa esse. Commodi dignissimos et.",
                            GenreId = 2,
                            ISBN = "541dea3c-6d4f-d6a1-8d0a-a14d9f238ee0",
                            Image = "https://drive.google.com/thumbnail?id=1Eu7yiiaAMfb0ktMOKhJZN6htKhF-TPDc&sz=w1000",
                            IsBestSeller = true,
                            IsFeatured = true,
                            Pages = 315,
                            Publisher = "Kerluke Group",
                            Title = "Ut eveniet quae.",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Year = 2023
                        },
                        new
                        {
                            Id = 6,
                            Author = "Sabina Halvorson",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Maiores iusto porro omnis provident. Libero quas odio ea non sunt non. Natus non qui odio rerum molestiae error accusamus. Dolore eos rem ad est. Ipsa dolore voluptatem inventore delectus ad doloribus sit doloribus. Atque dolor maiores atque ea quae in asperiores quisquam reiciendis.",
                            GenreId = 2,
                            ISBN = "3c8e6479-e4e8-2667-1d05-e0a9dc591808",
                            Image = "https://drive.google.com/thumbnail?id=1Hk2fvOg7hpmRwKWc-QTl82NGerqKib71&sz=w1000",
                            IsBestSeller = true,
                            IsFeatured = true,
                            Pages = 354,
                            Publisher = "Windler, Parker and Bogisich",
                            Title = "Dolorem facilis dolorum.",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Year = 2023
                        },
                        new
                        {
                            Id = 7,
                            Author = "Alysa Auer",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Harum nam dolorem. Corrupti dolorum occaecati sit eum. Commodi maiores qui doloremque placeat. Fugit animi qui modi alias est ad. Necessitatibus deleniti ad molestias omnis.",
                            GenreId = 1,
                            ISBN = "ed6f9c6d-2e44-824a-3721-1f0c0a7e8cea",
                            Image = "https://drive.google.com/thumbnail?id=1cozBSsETbbn8YWA27-cyfpxAgOKX-FwJ&sz=w1000",
                            IsBestSeller = true,
                            IsFeatured = false,
                            Pages = 300,
                            Publisher = "Marks Inc",
                            Title = "Ea ut dolorum.",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Year = 2023
                        },
                        new
                        {
                            Id = 8,
                            Author = "Leatha Schaden",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Quisquam occaecati facere dolores maxime vero doloribus illum. Nisi ipsum totam neque harum cupiditate odio voluptatum voluptatem aliquid. Molestiae quam repellendus qui molestias facere sit id. Labore sapiente dignissimos dolore illo.",
                            GenreId = 2,
                            ISBN = "9a8a8dab-5907-56fe-2e4d-c1b416a20809",
                            Image = "https://drive.google.com/thumbnail?id=1X_DcLIDCuXHtlh2LDJrS07h8lNcK1vXl&sz=w1000",
                            IsBestSeller = false,
                            IsFeatured = false,
                            Pages = 192,
                            Publisher = "Baumbach - Willms",
                            Title = "Incidunt dolorem itaque.",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Year = 2023
                        },
                        new
                        {
                            Id = 9,
                            Author = "Evan Waelchi",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Aut perspiciatis amet est neque reprehenderit aut. Ipsa accusamus sunt reprehenderit temporibus. Sapiente non laudantium et quos ab non rerum nobis sit.",
                            GenreId = 3,
                            ISBN = "91bca149-59f9-86c2-ac8e-518105f92a0d",
                            Image = "https://drive.google.com/thumbnail?id=1UMX2PhE5C46EQuRL8UkbdUqIKGuBNbJ5&sz=w1000",
                            IsBestSeller = true,
                            IsFeatured = false,
                            Pages = 263,
                            Publisher = "Hagenes Group",
                            Title = "Accusamus tenetur laudantium.",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Year = 2024
                        },
                        new
                        {
                            Id = 10,
                            Author = "Nella Kozey",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Sed similique provident rem debitis impedit. Aut qui facere laboriosam nam ad vero et. Omnis ullam deserunt ipsam qui odit eveniet. Facilis blanditiis optio omnis occaecati velit omnis tempore.",
                            GenreId = 4,
                            ISBN = "26bb3ecc-4fd2-f8fe-6611-05499b8519ed",
                            Image = "https://drive.google.com/thumbnail?id=1kSEao7g56ZMPYkBxqCQi70rpfxSqGvMK&sz=w1000",
                            IsBestSeller = true,
                            IsFeatured = true,
                            Pages = 309,
                            Publisher = "Kozey - Nicolas",
                            Title = "Quam voluptatem eligendi.",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Year = 2023
                        },
                        new
                        {
                            Id = 11,
                            Author = "Elza Prosacco",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Id perspiciatis temporibus magni sed ipsa. Fuga autem occaecati ipsa ea ipsa. Consequatur impedit nisi iusto. Et consequuntur fuga consectetur provident et sed eos nobis commodi.",
                            GenreId = 5,
                            ISBN = "9e9aa082-8dd9-f096-012d-a35a7b697c22",
                            Image = "https://drive.google.com/thumbnail?id=1dwug9Rd51uRSIR61N0de32UGuZ1Ns3WH&sz=w1000",
                            IsBestSeller = true,
                            IsFeatured = false,
                            Pages = 445,
                            Publisher = "Konopelski Group",
                            Title = "Dolor nisi consequatur.",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Year = 2023
                        },
                        new
                        {
                            Id = 12,
                            Author = "Annabell Nikolaus",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Facilis ut consequatur fugiat qui numquam harum ut. Ut ipsum expedita eius aut. Ut delectus rerum. Autem maiores est accusantium earum.",
                            GenreId = 4,
                            ISBN = "2a80eac4-2011-a479-8ce2-963c9ef4011d",
                            Image = "https://drive.google.com/thumbnail?id=1UCje5bgDDxlWMWdYSK8tRgwMp-LkYM27&sz=w1000",
                            IsBestSeller = true,
                            IsFeatured = true,
                            Pages = 368,
                            Publisher = "Carroll Group",
                            Title = "Consequatur ut velit.",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Year = 2023
                        },
                        new
                        {
                            Id = 13,
                            Author = "Elias Beer",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Eius saepe velit at possimus. Alias maiores et corporis nostrum labore aut repellat. Labore deserunt molestiae fugit libero aut voluptatibus qui assumenda aspernatur.",
                            GenreId = 2,
                            ISBN = "ee97725b-d946-ed1c-caec-ab638247b1f2",
                            Image = "https://drive.google.com/thumbnail?id=17pwzIwvq6pyTJyqQ9ooT7dRXMwIHVNeU&sz=w1000",
                            IsBestSeller = true,
                            IsFeatured = false,
                            Pages = 198,
                            Publisher = "Hayes - Stoltenberg",
                            Title = "Blanditiis tempore laborum.",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Year = 2024
                        },
                        new
                        {
                            Id = 14,
                            Author = "Nannie Schamberger",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Quisquam et consequuntur necessitatibus modi quis ut qui ea nemo. Qui saepe similique nihil id sed ea. Sit quidem voluptate facere iusto fugit amet quia. Dolores incidunt voluptatem magnam cupiditate delectus dolorum. Quidem odit voluptatem voluptatem deleniti quae. Dolores laboriosam assumenda consectetur quae ut sequi et assumenda deleniti.",
                            GenreId = 4,
                            ISBN = "05dc515c-7e6e-1165-c93c-e739947ecdf3",
                            Image = "https://drive.google.com/thumbnail?id=1VGdbU9YQSgzTyesLYdt6xgANcWlOzVlX&sz=w1000",
                            IsBestSeller = false,
                            IsFeatured = true,
                            Pages = 271,
                            Publisher = "Nicolas - Wisoky",
                            Title = "At quis accusantium.",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Year = 2024
                        },
                        new
                        {
                            Id = 15,
                            Author = "Carleton Schowalter",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Quo alias vel unde. Ut aperiam aut dignissimos. Aut voluptatem voluptas praesentium modi quibusdam nam commodi iste autem. Qui officiis dolor qui.",
                            GenreId = 4,
                            ISBN = "bc21ba90-1d65-28ea-57cd-adab45abd136",
                            Image = "https://drive.google.com/thumbnail?id=1-wmBdCw9y0cuT_jaYQVd8zUtQ5Y6WydG&sz=w1000",
                            IsBestSeller = false,
                            IsFeatured = true,
                            Pages = 198,
                            Publisher = "Sporer - Predovic",
                            Title = "Et voluptas incidunt.",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Year = 2024
                        },
                        new
                        {
                            Id = 16,
                            Author = "Alba Ziemann",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Tempora non aliquid ut vitae. Sed et nesciunt error amet molestias non. Voluptatem a optio id. Occaecati perspiciatis quia sapiente. Aut sed adipisci vel laboriosam error porro velit explicabo ut. Qui quo ex.",
                            GenreId = 2,
                            ISBN = "a247f4e4-e62b-49ca-5bbb-52e425e4edec",
                            Image = "https://drive.google.com/thumbnail?id=17LCGXsaF8chECGxR5IXHkj5qc7UrWIqw&sz=w1000",
                            IsBestSeller = true,
                            IsFeatured = true,
                            Pages = 491,
                            Publisher = "Simonis Inc",
                            Title = "Perferendis doloribus ut.",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Year = 2023
                        },
                        new
                        {
                            Id = 17,
                            Author = "Timmothy Windler",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Mollitia sequi aperiam sed perferendis. Qui molestias deleniti repellendus quia. Et quis aut consequatur.",
                            GenreId = 3,
                            ISBN = "17e0c3f3-4a9c-9201-7c4b-257480c7b8d4",
                            Image = "https://drive.google.com/thumbnail?id=1V5-GfhMxAUE5QhKYGDtE1XlAjl3sRZFN&sz=w1000",
                            IsBestSeller = true,
                            IsFeatured = true,
                            Pages = 496,
                            Publisher = "Hodkiewicz - Feest",
                            Title = "Voluptas iusto quidem.",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Year = 2023
                        },
                        new
                        {
                            Id = 18,
                            Author = "Bettie Boyle",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Repellendus dolores cupiditate quibusdam odio. Voluptatem est quis minus sed quo. Aut iure quidem consequatur. Odio est commodi laudantium hic voluptatem doloremque dolorum aliquid hic.",
                            GenreId = 3,
                            ISBN = "1070fc24-bde0-e9a3-95c6-229673cbb592",
                            Image = "https://drive.google.com/thumbnail?id=129hAaWbWcEXubYXVEy2-a4Gbs0ulv9La&sz=w1000",
                            IsBestSeller = true,
                            IsFeatured = false,
                            Pages = 394,
                            Publisher = "Schumm, Gottlieb and Gusikowski",
                            Title = "Tenetur perspiciatis qui.",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Year = 2024
                        },
                        new
                        {
                            Id = 19,
                            Author = "Marcel Lueilwitz",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Quod dolores iste vero ad repellendus necessitatibus. Ab vel dolorem aliquid rerum sequi quidem nihil et. Vel et eum qui voluptatem et et vitae excepturi molestiae. Totam occaecati ut quod deleniti fugit aut necessitatibus quod mollitia.",
                            GenreId = 4,
                            ISBN = "67373c3e-c422-baf4-7724-6204c4eac539",
                            Image = "https://drive.google.com/thumbnail?id=1iS1vCXQNst3Cm0hkq0m9m53HlFXB2e_b&sz=w1000",
                            IsBestSeller = true,
                            IsFeatured = false,
                            Pages = 224,
                            Publisher = "Zieme - Kub",
                            Title = "Sed porro dolorum.",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Year = 2024
                        },
                        new
                        {
                            Id = 20,
                            Author = "Brenden Ziemann",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Quibusdam dicta officiis facilis omnis animi et quis quaerat blanditiis. Est modi minima quia facilis similique. Officiis quia quia odio. Delectus et velit voluptate laborum beatae. Molestiae cumque deleniti sit et vitae. Magni architecto rerum repellat.",
                            GenreId = 4,
                            ISBN = "2854621f-58dc-29ed-dee0-199ad6fea9bc",
                            Image = "https://drive.google.com/thumbnail?id=1EsQ7X9KyU57dg3N3AjHn_xtUtauiElDF&sz=w1000",
                            IsBestSeller = true,
                            IsFeatured = true,
                            Pages = 216,
                            Publisher = "Brown, Lueilwitz and Gulgowski",
                            Title = "Deleniti sunt totam.",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Year = 2024
                        });
                });

            modelBuilder.Entity("code_assessment_api.Models.BookTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CheckInTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CheckOutTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("CheckedInById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CheckedOutById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DueTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("CheckedInById");

                    b.HasIndex("CheckedOutById");

                    b.HasIndex("UserId");

                    b.ToTable("BookTransactions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BookId = 3,
                            CheckOutTime = new DateTime(2024, 7, 19, 19, 59, 16, 655, DateTimeKind.Local).AddTicks(2550),
                            CheckedOutById = "5",
                            DueTime = new DateTime(2024, 7, 24, 19, 59, 16, 655, DateTimeKind.Local).AddTicks(3670),
                            UserId = "1"
                        },
                        new
                        {
                            Id = 2,
                            BookId = 9,
                            CheckOutTime = new DateTime(2024, 7, 19, 19, 59, 16, 655, DateTimeKind.Local).AddTicks(2550),
                            CheckedOutById = "5",
                            DueTime = new DateTime(2024, 7, 24, 19, 59, 16, 655, DateTimeKind.Local).AddTicks(4240),
                            UserId = "3"
                        },
                        new
                        {
                            Id = 3,
                            BookId = 2,
                            CheckOutTime = new DateTime(2024, 7, 19, 19, 59, 16, 655, DateTimeKind.Local).AddTicks(2550),
                            CheckedOutById = "5",
                            DueTime = new DateTime(2024, 7, 24, 19, 59, 16, 655, DateTimeKind.Local).AddTicks(4260),
                            UserId = "4"
                        },
                        new
                        {
                            Id = 4,
                            BookId = 17,
                            CheckOutTime = new DateTime(2024, 7, 19, 19, 59, 16, 655, DateTimeKind.Local).AddTicks(2550),
                            CheckedOutById = "5",
                            DueTime = new DateTime(2024, 7, 24, 19, 59, 16, 655, DateTimeKind.Local).AddTicks(4270),
                            UserId = "4"
                        },
                        new
                        {
                            Id = 5,
                            BookId = 7,
                            CheckOutTime = new DateTime(2024, 7, 19, 19, 59, 16, 655, DateTimeKind.Local).AddTicks(2550),
                            CheckedOutById = "5",
                            DueTime = new DateTime(2024, 7, 24, 19, 59, 16, 655, DateTimeKind.Local).AddTicks(4280),
                            UserId = "1"
                        });
                });

            modelBuilder.Entity("code_assessment_api.Models.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "",
                            Name = "Fiction"
                        },
                        new
                        {
                            Id = 2,
                            Description = "",
                            Name = "Non-Fiction"
                        },
                        new
                        {
                            Id = 3,
                            Description = "",
                            Name = "Self-Help"
                        },
                        new
                        {
                            Id = 4,
                            Description = "",
                            Name = "Biography"
                        },
                        new
                        {
                            Id = 5,
                            Description = "",
                            Name = "Cookbook"
                        });
                });

            modelBuilder.Entity("code_assessment_api.Models.ProfileAvatar", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProfileAvatars");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Url = "https://robohash.org/1"
                        },
                        new
                        {
                            Id = 2,
                            Url = "https://robohash.org/2"
                        },
                        new
                        {
                            Id = 3,
                            Url = "https://robohash.org/3"
                        },
                        new
                        {
                            Id = 4,
                            Url = "https://robohash.org/4"
                        },
                        new
                        {
                            Id = 5,
                            Url = "https://robohash.org/5"
                        },
                        new
                        {
                            Id = 6,
                            Url = "https://robohash.org/6"
                        },
                        new
                        {
                            Id = 7,
                            Url = "https://robohash.org/7"
                        },
                        new
                        {
                            Id = 8,
                            Url = "https://robohash.org/8"
                        },
                        new
                        {
                            Id = 9,
                            Url = "https://robohash.org/9"
                        },
                        new
                        {
                            Id = 10,
                            Url = "https://robohash.org/10"
                        },
                        new
                        {
                            Id = 11,
                            Url = "https://robohash.org/11"
                        },
                        new
                        {
                            Id = 12,
                            Url = "https://robohash.org/12"
                        },
                        new
                        {
                            Id = 13,
                            Url = "https://robohash.org/13"
                        },
                        new
                        {
                            Id = 14,
                            Url = "https://robohash.org/14"
                        },
                        new
                        {
                            Id = 15,
                            Url = "https://robohash.org/15"
                        },
                        new
                        {
                            Id = 16,
                            Url = "https://robohash.org/16"
                        },
                        new
                        {
                            Id = 17,
                            Url = "https://robohash.org/17"
                        },
                        new
                        {
                            Id = 18,
                            Url = "https://robohash.org/18"
                        },
                        new
                        {
                            Id = 19,
                            Url = "https://robohash.org/19"
                        },
                        new
                        {
                            Id = 20,
                            Url = "https://robohash.org/20"
                        },
                        new
                        {
                            Id = 21,
                            Url = "https://robohash.org/21"
                        },
                        new
                        {
                            Id = 22,
                            Url = "https://robohash.org/22"
                        },
                        new
                        {
                            Id = 23,
                            Url = "https://robohash.org/23"
                        },
                        new
                        {
                            Id = 24,
                            Url = "https://robohash.org/24"
                        },
                        new
                        {
                            Id = 25,
                            Url = "https://robohash.org/25"
                        },
                        new
                        {
                            Id = 26,
                            Url = "https://robohash.org/26"
                        },
                        new
                        {
                            Id = 27,
                            Url = "https://robohash.org/27"
                        },
                        new
                        {
                            Id = 28,
                            Url = "https://robohash.org/28"
                        },
                        new
                        {
                            Id = 29,
                            Url = "https://robohash.org/29"
                        },
                        new
                        {
                            Id = 30,
                            Url = "https://robohash.org/30"
                        },
                        new
                        {
                            Id = 31,
                            Url = "https://robohash.org/31"
                        },
                        new
                        {
                            Id = 32,
                            Url = "https://robohash.org/32"
                        },
                        new
                        {
                            Id = 33,
                            Url = "https://robohash.org/33"
                        },
                        new
                        {
                            Id = 34,
                            Url = "https://robohash.org/34"
                        },
                        new
                        {
                            Id = 35,
                            Url = "https://robohash.org/35"
                        });
                });

            modelBuilder.Entity("code_assessment_api.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("First")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Last")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int?>("ProfileAvatarId")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("ProfileAvatarId");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "162615a4-ed89-4b75-b10c-79322042f803",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Constance_McLaughlin60@gmail.com",
                            EmailConfirmed = false,
                            First = "Constance",
                            Last = "McLaughlin",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            ProfileAvatarId = 25,
                            SecurityStamp = "5ac0fedf-e494-4bfb-a9eb-20df4c563195",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "Constance.McLaughlin"
                        },
                        new
                        {
                            Id = "2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "88137a4a-413c-40b0-9406-2ad47a18648b",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Ida46@gmail.com",
                            EmailConfirmed = false,
                            First = "Ida",
                            Last = "Kihn",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            ProfileAvatarId = 32,
                            SecurityStamp = "427647e6-c52b-4c3f-92ce-67297a9a01d0",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "Ida_Kihn"
                        },
                        new
                        {
                            Id = "3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6e0cf2cf-01e1-46ed-bf75-048867772613",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Sheri_Zieme@yahoo.com",
                            EmailConfirmed = false,
                            First = "Sheri",
                            Last = "Zieme",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            ProfileAvatarId = 29,
                            SecurityStamp = "daf21b46-92bb-466c-8e59-f8151025db11",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "Sheri7"
                        },
                        new
                        {
                            Id = "4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b87c6845-3e5a-4056-bd87-ae1d32897a5f",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Toby95@gmail.com",
                            EmailConfirmed = false,
                            First = "Toby",
                            Last = "Nikolaus",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            ProfileAvatarId = 20,
                            SecurityStamp = "10ed0c80-c6f3-4c0d-91a3-0c7cdcdf72b9",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "Toby.Nikolaus44"
                        },
                        new
                        {
                            Id = "5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "62b505da-d70e-4452-b1d0-cf2add3667e3",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Brandon.Ebert@yahoo.com",
                            EmailConfirmed = false,
                            First = "Brandon",
                            Last = "Ebert",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            ProfileAvatarId = 23,
                            SecurityStamp = "918f51ca-31de-4708-93f4-698af40d9728",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "Brandon.Ebert"
                        });
                });

            modelBuilder.Entity("code_assessment_api.Models.UserFavoritesBook", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId");

                    b.ToTable("UserFavoritesbooks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BookId = 1,
                            UserId = "1"
                        },
                        new
                        {
                            Id = 2,
                            BookId = 2,
                            UserId = "1"
                        },
                        new
                        {
                            Id = 3,
                            BookId = 3,
                            UserId = "1"
                        },
                        new
                        {
                            Id = 4,
                            BookId = 4,
                            UserId = "1"
                        },
                        new
                        {
                            Id = 5,
                            BookId = 5,
                            UserId = "1"
                        },
                        new
                        {
                            Id = 6,
                            BookId = 4,
                            UserId = "2"
                        },
                        new
                        {
                            Id = 7,
                            BookId = 5,
                            UserId = "2"
                        },
                        new
                        {
                            Id = 8,
                            BookId = 6,
                            UserId = "2"
                        },
                        new
                        {
                            Id = 9,
                            BookId = 7,
                            UserId = "2"
                        },
                        new
                        {
                            Id = 10,
                            BookId = 8,
                            UserId = "2"
                        },
                        new
                        {
                            Id = 11,
                            BookId = 9,
                            UserId = "2"
                        },
                        new
                        {
                            Id = 12,
                            BookId = 1,
                            UserId = "3"
                        },
                        new
                        {
                            Id = 13,
                            BookId = 2,
                            UserId = "3"
                        },
                        new
                        {
                            Id = 14,
                            BookId = 3,
                            UserId = "3"
                        },
                        new
                        {
                            Id = 15,
                            BookId = 4,
                            UserId = "3"
                        },
                        new
                        {
                            Id = 16,
                            BookId = 5,
                            UserId = "3"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("code_assessment_api.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("code_assessment_api.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("code_assessment_api.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("code_assessment_api.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("code_assessment_api.Models.Book", b =>
                {
                    b.HasOne("code_assessment_api.Models.Genre", "Genre")
                        .WithMany("Books")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("code_assessment_api.Models.BookTransaction", b =>
                {
                    b.HasOne("code_assessment_api.Models.Book", "Book")
                        .WithMany("Transactions")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("code_assessment_api.Models.User", "CheckedInBy")
                        .WithMany()
                        .HasForeignKey("CheckedInById");

                    b.HasOne("code_assessment_api.Models.User", "CheckedOutBy")
                        .WithMany()
                        .HasForeignKey("CheckedOutById");

                    b.HasOne("code_assessment_api.Models.User", "User")
                        .WithMany("Transactions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("CheckedInBy");

                    b.Navigation("CheckedOutBy");

                    b.Navigation("User");
                });

            modelBuilder.Entity("code_assessment_api.Models.User", b =>
                {
                    b.HasOne("code_assessment_api.Models.ProfileAvatar", "ProfileAvatar")
                        .WithMany("Users")
                        .HasForeignKey("ProfileAvatarId");

                    b.Navigation("ProfileAvatar");
                });

            modelBuilder.Entity("code_assessment_api.Models.UserFavoritesBook", b =>
                {
                    b.HasOne("code_assessment_api.Models.Book", "Book")
                        .WithMany("Favorites")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("code_assessment_api.Models.User", "User")
                        .WithMany("Favorites")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("code_assessment_api.Models.Book", b =>
                {
                    b.Navigation("Favorites");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("code_assessment_api.Models.Genre", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("code_assessment_api.Models.ProfileAvatar", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("code_assessment_api.Models.User", b =>
                {
                    b.Navigation("Favorites");

                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
